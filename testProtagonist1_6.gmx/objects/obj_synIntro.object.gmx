<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>obj_dialogueStepper</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init
event_inherited();

// current image
index = -2;

// state is NORMAL or FADE
state = NORMAL;

timer = 0;
duration = 35;

spr = spr_syntaxScenes;

back = false;

// customizable attributes
// start of fade-in
instart = 0.7;
// end of fade-out
outstart = 0.3;
// portion of total duration on fade-in
in = 0.3;
// portion of total duration on fade-out
out = 0.3;

// draw position (should be 0)
posX = 0;
posY = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// next

// start on next
timer = 0;
if (index &lt; -1)
{
    timer = duration;
}
if (!back &amp;&amp; state == FADE)
{
    back = true;
}
state = NORMAL;
index++;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw intro sequence
switch(state)
{
    case NORMAL:
        timer = 0;
        // draw back if necessary
        if (back)
        {
            draw_set_alpha(1);
            draw_set_color(c_black);
            draw_rectangle(0, 0, getDisplayRoomWidth(), getDisplayRoomHeight(), false);
        }
        // draw index
        if (inrange(index, 0, sprite_get_number(spr)))
        {
            draw_set_alpha(1);
            draw_sprite_stretched(spr, index, posX, posY, getDisplayRoomWidth(), getDisplayRoomHeight());
        }
        break;
    case FADE:
        // handle timer
        timer++;
        var intimer = timer - (duration * (instart));
        var outtimer = timer - (duration * (outstart - out));
        if (timer &gt;= duration)
        {
            timer = duration;
            state = NORMAL;
            back = true;
        }
        // fades from index - 1 to index
        // if fading in the background, do it
        draw_set_color(c_black);
        draw_set_alpha(1);
        if (!back)
        {
            draw_set_alpha(map_range(intimer, 0, duration * in, 0, 1));
        }
        draw_rectangle(0, 0, getDisplayRoomWidth(), getDisplayRoomHeight(), false);
        // draw index - 1 fade out
        if (inrange(index - 1, 0, sprite_get_number(spr)))
        {
            draw_set_alpha(1 - map_range(outtimer, 0, duration * out, 0, 1));
            draw_sprite_stretched(spr, index - 1, posX, posY, getDisplayRoomWidth(), getDisplayRoomHeight());
        }
        // draw index fade in
        if (inrange(index, 0, sprite_get_number(spr)))
        {
            draw_set_alpha(map_range(intimer, 0, duration * in, 0, 1));
            draw_sprite_stretched(spr, index, posX, posY, getDisplayRoomWidth(), getDisplayRoomHeight());
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

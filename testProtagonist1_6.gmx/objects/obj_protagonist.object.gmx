<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playerRight</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-32</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init
//This is the base for the protagonist, and the parent for all other protagonist pieces
spd = 5;
imgspd = 0.3;
image_speed = 0;

// facing
dir = 0;

/// keys
keys[RIGHT] = ord('D');
keys[UP] = ord('W');
keys[LEFT] = ord('A');
keys[DOWN] = ord('S');

/// sprites
sprites[RIGHT] = spr_playerRight;
sprites[UP] = spr_playerUp;
sprites[LEFT] = spr_playerLeft;
sprites[DOWN] = spr_playerDown;

// no rotation
phy_rotation = 0;
phy_fixed_rotation = true;

// previous coords
prevX = phy_position_x;
prevY = phy_position_y;

// check if first frame (don't draw on first frame if transitioning)
firstframe = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// change sprite
var imgindex = image_index;

// calculate sprite appearance
var dist = point_distance(prevX, prevY, phy_position_x, phy_position_y);

/// if moving right
if (dir &lt;= 45 || dir &gt;= 315)
{
    sprite_index = sprites[RIGHT];
}
/// if moving left
else if (dir &gt;= 135 &amp;&amp; dir &lt;= 225)
{
    sprite_index = sprites[LEFT];
}
/// if moving up
else if (dir &gt; 45 &amp;&amp; dir &lt; 135)
{
    sprite_index = sprites[UP];
}
/// if moving down
else if (dir &gt; 225 &amp;&amp; dir &lt; 315)
{
    sprite_index = sprites[DOWN];
}

// moving or not
if (dist &gt; spd * 0.3)
{
    dir = point_direction(prevX, prevY, phy_position_x, phy_position_y);
    image_index = imgindex + imgspd;
}
else
{
    image_index = 0;
    // key press makes player face that direction
    if (playerCanMove())
    {
        if (keyboard_check(keys[RIGHT]))
        {
            dir = 0;
        }
        if (keyboard_check(keys[UP]))
        {
            dir = 90;
        }
        if (keyboard_check(keys[LEFT]))
        {
            dir = 180;
        }
        if (keyboard_check(keys[DOWN]))
        {
            dir = 270;
        }
    }
}

// set previous x and y
prevX = phy_position_x;
prevY = phy_position_y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///depth control
depthify();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// move
if (playerCanMove())
{
    if (keyboard_check(keys[RIGHT]))
    {
        phy_position_x += spd;
    }
    if (keyboard_check(keys[UP]))
    {
        phy_position_y -= spd;
    }
    if (keyboard_check(keys[LEFT]))
    {
        phy_position_x -= spd;
    }
    if (keyboard_check(keys[DOWN]))
    {
        phy_position_y += spd;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw self
if (!firstframe)
{
    draw_set_alpha(1);
    draw_self();
}
firstframe = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// test throw animation
var test = instance_nearest(0, 0, obj_syntaxWalker);

if (!instance_exists(test))
{
    exit;
}

with (obj_gravityAnimation)
{
    instance_destroy();
}

var grav = noone;
// if offscreen, put back onscreen
if (!point_in_rectangle(getX(test), getY(test), 0, 0, room_width, room_height))
{
    setX(test, 96);
    setY(test, 544);
    grav = movementAnimation(obj_gravityAnimation, test, 0, 0, 8, 18);
    grav.projVelX = 1;
    grav.projVelY = 0;
}
// otherwise, player moves it around
else if (point_distance(playerX(), playerY(), getX(test), getY(test) - 32) &lt; 60)
{
    var kickdir = point_direction(playerX(), playerY(), getX(test), getY(test) - 32);
    grav = movementAnimation(obj_gravityAnimation, test, 0, 0, 8, 12);
    grav.projVelX = lengthdir_x(1, kickdir);
    grav.projVelY = lengthdir_y(1, kickdir);
}
// settings
if (grav != noone)
{
    grav.projX = getX(test);
    grav.projY = getY(test);
    grav.color = c_gray;
    grav.dustX = 0;
    grav.dustY = 32;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>64,96</point>
    <point>96,96</point>
    <point>96,128</point>
    <point>64,128</point>
  </PhysicsShapePoints>
</object>

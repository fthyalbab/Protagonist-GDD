<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_synHead</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>50</depth>
  <persistent>0</persistent>
  <parentName>obj_syntaxBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///head draw varaibles
event_inherited();

x += 10;
y += 2;

//Starting Vars
initialX = x;
initialY = y;

// growl animation bounds
xMin = -4;
xMax = 4;
yMin = -1.5;
yMax = 1.5;

// damaged state
damaged = false;

// how often to update head position
timer = 0;
duration = 3;

// get relation to body
bodyX = x - obj_synBody.x;
bodyY = y - obj_synBody.y;

// current and old targets to move to
targetX = 0;
targetY = 0;
oldTargetX = targetX;
oldTargetY = targetY;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///head growl
if (exploded)
{
    exit;
}

// randomize head position within bounds for growl effect
if (timer &gt;= duration)
{
    // set new target
    var angle = irandom_range(0, 360);
    oldTargetX = targetX;
    oldTargetY = targetY;
    targetX = lengthdir_x(xMax, angle);
    targetY = lengthdir_y(yMax, angle);
    targetX = clamp(targetX, xMin, xMax);
    targetY = clamp(targetY, yMin, yMax);
    // reset timer
    timer = 0;
}
timer++;
// go from old target to new target and keep head within bounds (close to body)
var posX = obj_synBody.x + bodyX;
var posY = obj_synBody.y + bodyY;
x = posX + map_range(timer, 0, duration, oldTargetX, targetX);
y = posY + map_range(timer, 0, duration, oldTargetY, targetY);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init
angle = 0;
spd = -4;
// exitable
exitable = true;

// apollo button
apolloPress = false;
apolloUsed = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// only move cursor if not in dialogue
if (checkCombatPause())
{
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw cursor
angle += spd;
var X = cursor_get_x();
var Y = cursor_get_y();
var X2 = X;
var Y2 = Y;
if (instance_number(obj_letterFired) &gt; 0)
{
    with (obj_letterFired)
    {
        X2 = targetX;
        Y2 = targetY;
    }
}
else if (instance_number(obj_spellEffect) &gt; 0)
{
    with (obj_spellEffect)
    {
        X2 = targetX;
        Y2 = targetY;
    }
}
drawReticle(X, Y, 25, 3, 13, 2, angle, 19, 34, 3, X2, Y2);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw exit button
if (exitable)
{
    if (mouse_in_rect(getDisplayRoomWidth() - 32, 0, 32, 32))
    {
        draw_set_alpha(1);
        draw_sprite(spr_exitPuzzle, 1, getDisplayRoomWidth() - 32, 0);
        if (mouse_check_button_pressed(mb_left))
        {
            playClickSound();
            if (checkCombatActive())
            {
                dialogueLoad("run1.protd");
                dialogueStart("", obj_dialogueBoxSpecial);
            }
            else
            {
                obj_jokeTestAth.state = CLOSING;
                instance_create(0, 0, obj_getStabbed);
            }
        }
    }
    else
    {
        draw_set_alpha(1);   
        draw_sprite(spr_exitPuzzle, 0, getDisplayRoomWidth() - 32, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw minimize button on Athena test
if (exitable &amp;&amp; !checkCombatActive())
{
    if (mouse_in_rect(getDisplayRoomWidth() - 68, 0, 32, 32))
    {
        draw_set_alpha(1);
        draw_sprite(spr_exitPuzzle, 3, getDisplayRoomWidth() - 68, 0);
        if (mouse_check_button_pressed(mb_left))
        {
            obj_jokeTestAth.state = CLOSING;
        }
    }
    else
    {
        draw_set_alpha(1);   
        draw_sprite(spr_exitPuzzle, 2, getDisplayRoomWidth() - 68, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw apollo button if necessary
if (checkFlag("Ap") &amp;&amp; exitable)
{
    var size = 96;
    var abPosX = getDisplayRoomWidth() - size;
    var abPosY = getDisplayRoomHeight() - size;
    // if apollo not already used
    if (!apolloUsed &amp;&amp; (obj_combatPuzzle.playerHP&lt;(obj_combatPuzzle.playerMaxHP/2)))
    {
        draw_sprite_stretched(spr_apolloButton, apolloPress, abPosX, abPosY, size, size);
        // check for press
        if (!mouse_in_rect(abPosX, abPosY, size, size))
        {
            apolloPress = false;
        }
        if (mouse_check_button_pressed(mb_left) &amp;&amp; mouse_in_rect(abPosX, abPosY, size, size))
        {
            apolloPress = true;
        }
        // released on the button
        if (mouse_check_button_released(mb_left) &amp;&amp; apolloPress &amp;&amp; mouse_in_rect(abPosX, abPosY, size, size))
        {
            // apollo button was pressed
            // create the apollo chariot
            instance_create(0, 0, obj_apolloChariot);
            apolloUsed = true;
        }
    }
    // if already used, no press and draw gray button
    else
    {
        draw_sprite_stretched_ext(spr_apolloButton, 0, abPosX, abPosY, size, size, c_dkgray, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

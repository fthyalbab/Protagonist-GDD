<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_sentientWall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup Code
/// - Savvy
//Unique variables (change with each child):
//currentSprite = ""; //
moveOn = false; //THIS IS THE SWITCH THAT TRIGGERS THE NEXT EVENT.
numMessages = 18; //Number of possible dialouge choices (including the 0th index)
talkSprite = spr_talkHades; //Talk sprite to be used for the text
talkImage = 0; //current frame of the talk sprite above, used in draw
deFont = fnt_Hades; //used font
textColor = c_white; 
textBoxColor = c_black;
image_speed = 0.3;
image_alpha = 0.2;
random_set_seed(5);
//boxX=random_range(40, room_width);
//boxY=random_range(40, room_height-100);
finishedString = "";
message[0] = "Welcome Hero, to darkness of war.";
boxX = (room_width/2)-15*string_length(message[0]);
boxY = (room_height/2)-10;
//audio_play_sound(Subversa,2,true);
//audio_sound_gain(Subversa, 0, 0);
//audio_sound_gain(Subversa, 1, 500);
//write your messages in an array, starting at 0, like so
message[1] = "The turning point between GOOD and EVIL";
message[2] = "Give thy love to the gods of lore?";
message[3] = "Or forge agreements to make lives equal?";  
message[4] = "Or bolder still, together band,";
message[5] = "Lead the mortals to life free from gods";  
message[6] = "Destroy those who would force thy hand,";
message[7] = "End the suff’ring of earthly clods";  
//break
message[8] = "CHAOS, LAWFULNESS, GODS, and MORTALS";  
message[9] = "Owl in armour, the goddess shall see.";  
message[10] = "Thy choice, to fight for thyself or morals,";  
message[11] = "In the forest, thy friend or en’my?";  
message[12] = "In fires of gods, mere mortals will quiver,";  
message[13] = "Or by thy aim, the fires may cease,";  
message[14] = "The light of the moon can cause you to shiver,";  
message[15] = "Or by thy hammer, forge light into peace.";  
message[16] = "YOU could be the catalyst in - ";  
message[17] = "Oh.";

//Controls for other methods:
intDelay = 0; //Delays the start of the text
timeSpeak = 0; //Keeps track of what frame the talk sprite is on
timeSpeakMax = 7; //How many steps before the talk sprite frame changes (default = 7)
talking=true;
talkingTest = true;
axisHit = false; //used for checking near collisions
hit = false; //used for checking near collisions
timer = 0; //Used for delaying between 'f' interactions
countdown = false; //Used for delaying between 'f' interactions
upbox = false; //always draws the textbox in the upper area
downbox = false; //always draws the textbox in the lower area
message_current = 0; //0 is the first number in our array, and the message we are currently at
message_end = numMessages-1; //the last number in our array
message_draw = ""; //this is what we 'write' out. It's blank right now
increase = 0.5; //the speed at which new characters are added
characters = 0; //how many characters have already been drawn
hold = 0; //if we hold 'Z', the text will render faster
//boxX=random_range(0, room_width-string_length(message_draw)*50);
//boxY=random_range(0, room_height-100);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup New Line Divider

for (i = 0; i&lt;=message_end; i++){ //for each message...
   for (j = 0; j &lt; string_length(message[i]); j++){ //for each character...
         if (j mod 60 == 0 &amp;&amp; j != 0){ //For every 30 characters...
          finishedString += "#"; //Add a new line
        }
        finishedString += string_char_at(message[i], j+1); //Then add/ the next char as usual
        //*Debug*/show_message(finishedString);   //^^^^ INDEX STARTS AT 1 FOR THIS METHOD
        //*Debug*/show_message(j); j is climbing properly  
   }
    message[i] = finishedString; //Return the new nice string to replace the old one
    finishedString = ""; //Reset the finished string
}

message_length = string_length(message[message_current]); //get the number of characters in the first message
//*Debug*/show_message(message[0]);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>talking</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sets 'Typewriter' Messaging for the Draw Method ///////////////////////////////
                   //////// Resets a ton of stuff /////////// - Tech Savvy    
    if (characters &lt; message_length) { //if current character count is less than the amount in current message* 
        ///sound effect test
       if (characters%4==0){
       //  audio_play_sound(snd_Xylo3, 1, false);
       //audio_play_sound(asset_get_index("snd_Treble"+string(round(random_range(3, 6)))),random_range(1, 20), false);
        }
      //  show_message(string("snd_Xylo"+string(random_range(1, 4))));
        
        
        hold = keyboard_check(ord("F")); //hold is true or false if we hold 'F' or not
        characters += increase * (1 + hold); //increase speed based on hold (remember true is 1)
        message_draw = string_copy(message[message_current], 0, characters); //copy string to current character  
    } 
    else { //if current character is more than the amount in the current message
        talkImage = 0; //stop frames on talk sprite
        if (keyboard_check_pressed(ord("F"))) { //if we press F...
        if (message_current &lt; message_end) { //if there are more messages left to show (0 -&gt; 6, in our case)
               if(message_current&gt;=3){
                obj_launchButton.visible = true;
               }   
               obj_greekScenes.image_index++;     
               message_current += 1; //increase the message by 1
               message_length = string_length(message[message_current]);  //get the new character length for message
               boxX = room_width/2-10*message_length;
                 characters = 0; //set the characters back to 0
                message_draw = ""; //clear the drawn text
                // boxX=random_range(0, room_width-string_length(message_draw)*50);
                // boxY=random_range(0, room_height-100);
            }
            else { 
               talking = false; //finish drawing events
               message_current = 0; //reset the message list so it can loop (modify!)
               obj_protagonist.canMove = true; // let the protagonist walk again, inherited?
               characters = 0; //maybe works
               message_draw = ""; //reset the drawn image (rectangle will stay the same)
               countdown = true; //starts timer
               intDelay = 0; //reset the delay for next interaction
               moveOn = true;
               obj_hades.talking = true;
              // show_message("Hades is activated.");
            }
    
         }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///This event is just being used to skip over maps
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>222</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_next_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw textbox in right spot (bottom of screen for default, top if it would block something)




//Check if protagonist or object are in the default textbox area or if upbox or downbox is on
    //This is the default location
    draw_set_colour(textBoxColor);
    draw_rectangle(boxX, boxY, boxX+string_length(message_draw)*15, boxY-50, false);
    draw_set_colour(textColor);
    draw_set_font(deFont);
   //draw the text at the coordinates
    draw_text_transformed(boxX+30, boxY-40, message_draw, 1, 1, 0);
  if (timeSpeak == timeSpeakMax){
   talkImage++; //changes the talk sprite frame
   timeSpeak = 0;
   }
 timeSpeak++; //adds one to the animation timer

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

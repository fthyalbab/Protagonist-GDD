<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_whereTo</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>obj_Rosetta</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>talking</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sets 'Typewriter' Messaging for the Draw Method ///////////////////////////////
                   //////// Resets a ton of stuff /////////// - Tech Savvy    

    if (characters &lt; message_length) { //if current character count is less than the amount in current message* 
        hold = keyboard_check(ord("F")); //hold is true or false if we hold 'F' or not
        characters += increase * (1 + hold); //increase speed based on hold (remember true is 1)
        message_draw = string_copy(message[message_current], 0, characters); //copy string to current character
     } 
    else { //if current character is more than the amount in the current message         
         stoneVanish = 0;
         talkImage = 0; //stop frames on talk sprite
        if (keyboard_check_pressed(ord("F"))) { //if we press F...
            if (message_current &lt; message_end) { //if there are more messages left to show (0 -&gt; 6, in our case)
                message_current += 1; //increase the message by 1
                message_length = string_length(message[message_current]);  //get the new character length for message
                characters = 0; //set the characters back to 0
                message_draw = ""; //clear the drawn text
            }
            else { //if our messages are done (we reach 6, in our case)...
               talking = false; //finish drawing events
               message_current = 0; //reset the message list so it can loop (modify!)
               obj_protagonist.canMove = true; // let the protagonist walk again, inherited?
               characters = 0; //maybe works
               message_draw = ""; //reset the drawn image (rectangle will stay the same)
               countdown = true; //starts timer
               intDelay = 0; //reset the delay for next interaction
               //*Debug*/show_message("We're done here");
            }
    
         }
    }






//Long live the pioneers, rebels, and mutineers
//*Bass drop from Roses by The Chainsmokers &amp; ROZES*
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///(Temporarily down) ROSETTA STONE DESTRUCTION
  //Will not run once the text is done printing because it is waiting for input
  
  /*
  for (a = 0; a &lt; stoneVanish; a++){
          message_draw = string_replace(message_draw, string_copy(message[message_current], a-1, a), " ");
     }
     
     if (characters &gt; 6){
        //if (random(10) &gt; 5){
             stoneVanish++;
      //  }
     } 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prevent stacking of dialouge when closing the textbox window

if (countdown == true){
    timer++;
    if (timer &gt;= 9){
        timer = 0;
        countdown = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unique variables (change with each child):
currentSprite = ""; //don't remember ??? what is this
message_end = 2; //Number of possible dialouge choices (if some are hidden, put if statements while drawing?)
talkSprite = spr_talkStone; //Talk sprite to be used for the text
deFont = fnt_trimuram; //used font
reFont = fnt_syntax; //second font
textColor = c_yellow; 
textBoxColor = c_dkgray; //not used for this though
message[0] = "SPHINX OF"; //21 char limit per string
message[1] = "BLACK QUARTZ"; //21 char limit per string
message[2] = "JUDGE MY VOW"; //21 char limit per string
finishedString = "";
stoneVanish = 0; //chars to change to blank
stoneNext = 0; //controls the offset for each line
//*Debug*/show_message(message[0]);


///Setup Code
/// - Savvy
//Unique variables (change with each child):
//currentSprite = ""; //
numMessages = 2; //Number of possible dialouge choices (if some are hidden, put if statements while drawing?)

//Controls for other methods:
intDelay = 0; //Delays the start of the text
timeSpeak = 0; //Keeps track of what frame the talk sprite is on
timeSpeakMax = 7; //How many steps before the talk sprite frame changes (default = 7)
talking = false; //checks to see whether it should run the graphics for the textbox and words
axisHit = false; //used for checking near collisions
hit = false; //used for checking near collisions
timer = 0; //Used for delaying between 'f' interactions
countdown = false; //Used for delaying between 'f' interactions
upbox = false; //always draws the textbox in the upper area
downbox = false; //always draws the textbox in the lower area
message_current = 0; //0 is the first number in our array, and the message we are currently at
message_end = 1; //the last number in our array
message_draw = ""; //this is what we 'write' out. It's blank right now
increase = 0.5; //the speed at which new characters are added
characters = 0; //how many characters have already been drawn
hold = 0; //if we hold 'Z', the text will render faster


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup New Line Divider

for (i = 0; i&lt;=message_end; i++){ //for each message...
   for (j = 0; j &lt; string_length(message[i]); j++){ //for each character...
         if (j mod 30 == 0 &amp;&amp; j != 0){ //For every 30 characters...
          finishedString += "#"; //Add a new line
        }
        finishedString += string_char_at(message[i], j+1); //Then add/ the next char as usual
        //*Debug*/show_message(finishedString);   //^^^^ INDEX STARTS AT 1 FOR THIS METHOD
        //*Debug*/show_message(j); j is climbing properly  
   }
    message[i] = finishedString; //Return the new nice string to replace the old one
    finishedString = ""; //Reset the finished string
}

message_length = string_length(message[message_current]); //get the number of characters in the first message
//*Debug*/show_message(message[0]);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>obj_Rosetta</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>talking</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>321</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_message</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>2</kind>
            <string>whoa whoa</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw textbox in right spot (bottom of screen for default, top if it would block something)




//Check if protagonist or object are in the default textbox area or if upbox or downbox is on

    //This is the default location
    
    // Draw stone image
   draw_sprite(talkSprite, 0, room_width/2 - sprite_get_width(talkSprite)/2, room_height-sprite_get_height(talkSprite));
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw textbox in right spot (bottom of screen for default, top if it would block something)




//Check if protagonist or object are in the default textbox area or if upbox or downbox is on

    //This is the default location
    
    // Draw stone image
     draw_set_colour(textColor);
    draw_set_font(deFont);
    draw_text(room_width/2 - sprite_get_width(talkSprite)/2+125, room_height-sprite_get_height(talkSprite)+100, message_draw); //draw the text at the coordinates
    draw_set_font(reFont);
    draw_text(room_width/2 - sprite_get_width(talkSprite)/2+175, room_height-sprite_get_height(talkSprite)/2, message_draw); //draw again in other language
    show_message(message_draw);
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

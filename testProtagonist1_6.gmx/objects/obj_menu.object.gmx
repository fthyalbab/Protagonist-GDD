<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// pre-init
initialized = false;
optionsList = noone;
returnPointer = noone;

state = CLOSED;
timer = 0;
duration = 7;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init if necessary
if (!initialized &amp;&amp; optionsList &gt;= 0 &amp;&amp; returnPointer &gt;= 0)
{
    initialized = true;
    // init code
    n = ds_list_size(optionsList);
    textBorder = 15;
    draw_set_font(fnt_dialogue);
    // find width as largest textblock, minimum as dialogue block size
    var maximum = room_width - (2 * obj_dialogue.display.outsideBorder);
    for (var i = 0; i &lt; n; i++)
    {
        var option = optionsList[| i];
        var w = string_width(option[| MENU_OPTION_NAME]) + (2 * textBorder);
        if (w &gt; maximum)
        {
            maximum = w;
        }
    }
    width = maximum;
    height = string_height("|") + (2 * textBorder);
    border = 3;
    // calculate outsideBorder
    var dialogueY = obj_dialogue.display.startY - obj_dialogue.display.nameSep - (string_height("|") + (2 * obj_dialogue.display.nameTextBorder));
    outsideBorder = (dialogueY - (n * height)) / (n + 1);
    centerX = room_width * 0.5;
    startY = 0;
    // set state
    state = OPENING;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check for click on an option
if (state != OPEN)
{
    exit;
}
/// draw all options
for (var i = 0; i &lt; n; i++)
{
    var posY = getNthCell(startY, outsideBorder, height, i);
    // check if cursor in rectangle
    if (point_in_rectangle(cursor_get_x(), cursor_get_y(), centerX - (0.5 * width), posY, centerX + (0.5 * width), posY + height))
    {
        playClickSound();
        // select ith option
        selectDialogueMenuOption(optionsList, i, returnPointer);
        optionsList = noone;
        // close
        state = CLOSING;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw
var t_width = map_range(timer, 0, duration, 0, width);
var t_textAlpha = map_range(timer, 0, duration, -2, 1);

// state machine
switch(state)
{
    case CLOSED:
        timer = 0;
        break;
    case OPENING:
        drawDefaultDialogueMenu(optionsList, n, centerX, startY, t_width, height, border, outsideBorder, textBorder, true, t_textAlpha);
        timer++;
        if (timer &gt;= duration)
        {
            state = OPEN;
        }
        break;
    case OPEN:
        drawDefaultDialogueMenu(optionsList, n, centerX, startY, width, height, border, outsideBorder, textBorder, true, 1);
        timer = duration;
        break;
    case CLOSING:
        drawDefaultDialogueMenu(optionsList, n, centerX, startY, t_width, height, border, outsideBorder, textBorder, true, t_textAlpha);
        timer--;
        if (timer &lt; 0)
        {
            // destroy menu once it closes, since it's done
            instance_destroy();
            state = CLOSED;
        }
        break;
    default:
        show_error("Invalid menu window state: " + string(state), true);
        state = CLOSED;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

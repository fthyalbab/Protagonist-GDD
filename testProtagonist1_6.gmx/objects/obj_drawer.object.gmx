<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// drawer init
// every drawer has variables that hold:

// sprite and image
sprite = noone;
image = noone;
// pos
posX = 0;
posY = 0;
// scale
scaleX = 1;
scaleY = 1;
// angle
angle = 0;
// alpha
alpha = 1;

// color
color = c_white;

// whether or not animation is complete
ready = false;

// the type of drawer
type = "";

// whether or not to self-destruct
finish = false;
// whether or not to hide
hide = false;

// persistent, since it works with dialogue
persistent = true;

// optional 'side' variable, used by some drawers
side = 0;

// which channel this is on
channel = "";

depth = obj_dialogue.display.depth + object_get_depth(object_index);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// make characters talk
talkTimer = 0;
talkDuration = 5;

// fade characters out if not focused on
talkFocus = false;
talkFocusDuration = 5;
talkFocusTimer = talkFocusDuration;
talkFocusGray = 128;
talkFocusScale = 0.95;
initScaleX = "";
initScaleY = "";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// if it's a character, make it talk
// check if it's a character
if (ds_map_exists(obj_dialogue.characters, channel))
{
    var talking = true;
    talkFocus = true;
    initScaleX = setNumber(initScaleX, scaleX);
    initScaleY = setNumber(initScaleY, scaleY);
    image = clamp(image, 0, 1);
    
    var char = obj_dialogue.characters[? channel];
    // check if person side matches
    switch(char[| CHARACTER_SIDE])
    {
        case LEFT:
            if (obj_dialogue.display.name == "")
            {
                talking = false;
                talkFocus = false;
            }
            break;
        case RIGHT:
            if (obj_dialogue.display.nameR == "")
            {
                talking = false;
                talkFocus = false;
            }
            break;
    }
    // check if text is moving
    if (string_length(obj_dialogue.display.currentText) &gt;= string_length(obj_dialogue.display.text) - 1)
    {
        talking = false;
    }
    // check if text is a pause
    var lastchar = string_char_at(obj_dialogue.display.currentText, string_length(obj_dialogue.display.currentText));
    if (ds_map_exists(obj_dialogue.speakpause, lastchar))
    {
        talking = false;
    }
    //if it is, make the mouth move
    if (talking || image)
    {
        talkTimer += 1;
        if (talkTimer &gt; talkDuration)
        {
            talkTimer = 0;
            image = !clamp(image, 0, 1);
        }
    }
    else
    {
        image = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handle talk focus state
if (ds_map_exists(obj_dialogue.characters, channel)
&amp;&amp; is_real(initScaleX) &amp;&amp; is_real(initScaleY))
{
    // go up if talk focus
    if (talkFocus)
    {
        if (talkFocusTimer &lt; talkFocusDuration)
        {
            talkFocusTimer++;
        }
    }
    // go down if not focused on
    else
    {
        if (talkFocusTimer &gt; 0)
        {
            talkFocusTimer--;
        }
    }
    talkFocusTimer = clamp(talkFocusTimer, 0, talkFocusDuration);
    
    // scale down if not focused
    scaleX = map_range(talkFocusTimer, 0, talkFocusDuration, talkFocusScale * initScaleX, initScaleX);
    scaleY = map_range(talkFocusTimer, 0, talkFocusDuration, talkFocusScale * initScaleY, initScaleY);
    
    // change color if not focused
    var gray = map_range(talkFocusTimer, 0, talkFocusDuration, talkFocusGray, 255);
    color = make_color_rgb(gray, gray, gray);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

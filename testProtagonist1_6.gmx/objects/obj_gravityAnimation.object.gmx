<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init using movementAnimation(obj_gravityAnimation, ...)

// the physics position
X = 0;
Y = 0;
VelX = 0;
VelY = 0;
AccX = 0;
AccY = -2;
bounce = 0.5;
bounceAbsorb = 0;
upwardsThreshold = 2;
fric = 0.2;
landed = false;

// the line to project the sprite's position along
projX = 0;
projY = 0;
projVelX = 1;
projVelY = 0;
scaleY = 1;

// the target to move
target = noone;

// particle color
color = noone;
dustX = 0;
dustY = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///gravity physics
if (!instance_exists(target))
{
    instance_destroy();
    exit;
}

if (!landed)
{
    // if airborne
    // calculate new position based on velocity
    X += VelX;
    Y += VelY;
    // update velocity
    VelX += AccX;
    VelY += AccY;
    // if position is below 0
    if (Y &lt;= 0)
    {
        // if velocity is high enough to bounce
        if (abs(VelY) &gt; upwardsThreshold + abs(AccY))
        {
            // bounce back up
            Y = 0;
            VelY = (-VelY * bounce) - bounceAbsorb;
            // slow down a bit
            if (abs(2 * fric) &gt;= abs(VelX))
            {
                VelX = 0;
            }
            else
            {
                VelX -= sign(VelX) * (2 * fric);
                if (color != noone)
                {
                    effect_create_above(ef_smoke, getX(target) + dustX, getY(target) + dustY, 1, color); 
                }
            }
            // trigger bounce event
            event_user(0);
        }
        // otherwise, we land
        if (abs(VelY) &lt;= upwardsThreshold + abs(AccY))
        {
            landed = true;
            VelY = 0;
            Y = 0;
            // trigger bounce event
            event_user(0);
            // trigger land event
            event_user(1);
        }
    }
}
// if we're landed
else
{
    // move forward
    X += VelX;
    // friction slows the object down
    if (abs(fric) &gt;= abs(VelX))
    {
        VelX = 0;
    }
    else
    {
        VelX -= sign(VelX) * fric;
        if (color != noone)
        {
            effect_create_above(ef_smoke, getX(target) + dustX, getY(target) + dustY, 1, color); 
        }
    }
}

// project X onto the given line and move the target object
var calculatedX = projX + (X * projVelX);
var calculatedY = projY + (X * projVelY) - (Y * scaleY);
setX(target, calculatedX);
setY(target, calculatedY);

// if the object's energy is at 0
if (VelX == 0 &amp;&amp; VelY == 0 &amp;&amp; Y == 0)
{
    //stop
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// land
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// bounce
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

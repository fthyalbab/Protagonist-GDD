<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_puzzle</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init
typoStr = "wherefore miopic";
typoStart = 11;
typoStop = 11;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// end combat
setFlag("puzzle5", PUZZLE_SOLVED);
endCombat();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// after spell is cast, on first hit
// if hit the right letter
var success = false;
var succStart = typoStart;
var succStop = typoStop;
var posX = X;
var posY = Y;
var targetStr = typoStr;
with (obj_letter)
{
    if (!spell)
    {
        // if within hitbox
        if (point_in_rectangle(posX, posY, getX(id) - 0.5 * sprite_width, getY(id) - 0.5 * sprite_height,
        getX(id) + 0.5 * sprite_width, getY(id) + 0.5 * sprite_height))
        {
            // check position
            if (str == targetStr &amp;&amp; pos &gt;= succStart &amp;&amp; pos &lt;= succStop)
            {
                success = true;
            }
        }
    }
}

// end puzzle if right letter was hit
if (success)
{
    // can no longer exit
    obj_combatCursor.exitable = false;
    // make the letters flicker
    var ef = createGroupEffect(obj_spellHitEffect, ds_list_create());
    with (obj_spellString)
    {
        // add contents to effect list
        for (var i = 0; i &lt; ds_list_size(list); i++)
        {
            ds_list_add(ef.list, list[| i]);
        }
        // remove the spellString
        instance_destroy();
    }
    // get ready to end
    if (alarm[0] &lt; 0)
    {
        alarm[0] = 60;
        prepareCombatEnd();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// combat start
// create the puzzle string
createLetterString(40, 60, "Recalcitrance warrants", false, 2, 60, 0.64);
createLetterString(80, 120, "a keener tableau", false, 2, 60, 0.64);
createLetterString(100, 180, "respecting nescience", false, 2, 60, 0.64);
createLetterString(160, 240, "wherefore miopic", false, 2, 60, 0.64);
createLetterString(100, 300, "cogitation cannot", false, 2, 60, 0.64);
createLetterString(300, 360, "abide", false, 2, 60, 0.64);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// inherit from spell effect
event_inherited();
handler = noone;

// make dialogue depth go down
oldDepth = obj_dialogue.display.depth;
obj_dialogue.display.depth = 1;
with (obj_drawer)
{
    depth = obj_dialogue.display.depth + object_get_depth(object_index);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw position
// init questions
sprite_index = spr_test;
event_user(6);
/// create selected and selected animation lists
selected = ds_list_create();
selectedTimer = ds_list_create();

for (var i = 0; i &lt; ds_list_size(questions); i++)
{
    ds_list_add(selected, noone);
    ds_list_add(selectedTimer, 0);
}

// calculate draw positions using questions and answers strings
W = sprite_get_width(sprite_index);
posX = (getDisplayRoomWidth() - W) * 0.5;

border = 20;
questionX = border;
// 441 is where the dashed line to start questions is
questionY = 441 + border;

// scroll bar dimensions
barW = 25;
barB = 5;
barTop = 35;
barBot = getDisplayRoomHeight() - 5;
barDrag = false;
// keep track of mouse's position in relation to the scroll bar
barDragY = 0;

draw_set_font(fnt_save);
strH = string_height("|" + newline() + "|") - string_height("|");
totalH = 0;
for (var i = 0; i &lt; ds_list_size(questions); i++)
{
    totalH += string_height(questions[| i]);
    var ans = answers[| i];
    if (ds_exists(ans, ds_type_list))
    {
        for (var j = 0; j &lt; ds_list_size(ans); j++)
        {
            totalH += string_height(ans[| j]);
        }
    }
    // whitespace in between questions
    totalH += strH;
}
ansIndent = string_width("    ");

scrollPos = -border;

// turn-in button
buttonH = 120;
buttonW = 308;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// fade in timer
state = OPENING;
timer = 0;
duration = 10;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// surface to draw if necessary
surf = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// clean up
if (surface_exists(surf))
{
    draw_surface(surf, 0, 0);
    surface_free(surf);
}

// swap the new handler back
obj_combat.handler = handler;

// activate everything again
instance_activate_all();

// free lists
for (var i = 0; i &lt; ds_list_size(questions); i++)
{
    if (ds_exists(answers[| i], ds_type_list))
    {
        ds_list_destroy(answers[| i]);
    }
}
ds_list_destroy(answers);
ds_list_destroy(questions);
ds_list_destroy(selected);
ds_list_destroy(selectedTimer);

// make dialogue depth go down
obj_dialogue.display.depth = oldDepth;
with (obj_drawer)
{
    depth = obj_dialogue.display.depth + object_get_depth(object_index);
}

// close menu if it is acting as one
if (!checkCombatActive())
{
    closeDialogueMenu();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// release scroll bar
barDrag = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init joke test questions
questions = ds_list_create();
answers = ds_list_create();

ds_list_add(questions, "Q: What was the extra letter in the first puzzle?");
ans = ds_list_create();
ds_list_add(ans, "A: O");
ds_list_add(ans, "B: M");
ds_list_add(ans, "C: L");
ds_list_add(ans, "D: E");
ds_list_add(answers, ans);

ds_list_add(questions, "Q: What was the first thing said to you?");
ans = ds_list_create();
ds_list_add(ans, "A: _protagonist_");
ds_list_add(ans, "B: Well");
ds_list_add(ans, "C: Hello World!");
ds_list_add(ans, "D: Welcome");
ds_list_add(answers, ans);

ds_list_add(questions, "Q: Who is your patron god?");
ans = ds_list_create();
ds_list_add(ans, "A: Athena");
ds_list_add(ans, "B: Athena");
ds_list_add(ans, "C: Athena");
ds_list_add(ans, "D: Athena");
ds_list_add(answers, ans);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check for question selection
if (checkCombatPause())
{
    exit;
}

draw_set_font(fnt_save);
var h = 0;
for (var i = 0; i &lt; ds_list_size(questions); i++)
{
    h += string_height(questions[| i]);
    var ans = answers[| i];
    if (ds_exists(ans, ds_type_list))
    {
        for (var j = 0; j &lt; ds_list_size(ans); j++)
        {
            var textX = posX + questionX + ansIndent;
            var textY = -scrollPos + questionY + h;
            // check if hit an answer
            if (point_in_rectangle(X, Y, textX, textY, textX + string_width(ans[| j]), textY + string_height(ans[| j])))
            {
                // if selecting a different answer
                if (j != selected[| i])
                {
                    selected[| i] = j;
                    // refresh animation
                    selectedTimer[| i] = 0;
                }
            }
            h += string_height(ans[| j]);
        }
    }
    // whitespace in between questions
    h += strH;
}

/// check for turn in button press
var buttonX = (getDisplayRoomWidth() - buttonW) * 0.5;
var buttonY = -scrollPos + questionY + h;
if (point_in_rectangle(X, Y, buttonX, buttonY, buttonX + buttonW, buttonY + buttonH))
{
    // check for athTest
    if (!checkCombatActive())
    {
        instance_create(0, 0, obj_getStabbed);
        state = CLOSING;
    }
    else
    {
        // turn in
        state = CLOSING;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handle state
// state machine
switch(state)
{
    case CLOSED:
        timer = 0;
        break;
    case OPENING:
        timer++;
        if (timer &gt;= duration)
        {
            state = OPEN;
        }
        break;
    case OPEN:
        timer = duration;
        break;
    case CLOSING:
        timer--;
        if (timer &lt; 0)
        {
            // destroy window once it closes, since it's done
            /// draw surface
            if (surface_exists(surf))
            {
                draw_set_alpha(1);
                draw_set_color(c_white);
                draw_surface(surf, 0, 0);
            }
            instance_destroy();
            state = CLOSED;
            exit;
        }
        break;
    default:
        show_error("Invalid test window state: " + string(state), true);
        state = CLOSED;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw surface
if (surface_exists(surf))
{
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_surface(surf, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw test
var alpha = map_range(timer, 0, duration, 0, 1);
draw_set_alpha(alpha);
draw_sprite(sprite_index, 0, posX, -scrollPos);
draw_set_color(make_color_rgb(232, 232, 232));
var totalSize = questionY + totalH + strH + buttonH + border;
draw_rectangle(posX, -scrollPos + sprite_get_height(sprite_index), posX + W, -scrollPos + totalSize, false);

// draw question/answer text
draw_set_color(c_black);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_font(fnt_save);
var letterHalfX = string_width("O") * 0.5;
var letterHalfY = string_height("O") * 0.5;
var h = 0;
for (var i = 0; i &lt; ds_list_size(questions); i++)
{
    draw_text(posX + questionX, -scrollPos + questionY + h, questions[| i]);
    h += string_height(questions[| i]);
    var ans = answers[| i];
    if (ds_exists(ans, ds_type_list))
    {
        for (var j = 0; j &lt; ds_list_size(ans); j++)
        {
            draw_text(posX + questionX + ansIndent, -scrollPos + questionY + h, ans[| j]);
            // if this answer is selected
            if (selected[| i] == j)
            {
                // draw the circled image
                draw_sprite(spr_dumbCircle, selectedTimer[| i],
                posX + questionX + ansIndent + letterHalfX, -scrollPos + questionY + h + letterHalfY);
                // increment animation
                selectedTimer[| i] = clamp(selectedTimer[| i] + 1, 0, sprite_get_number(spr_dumbCircle) - 1);
            }
            h += string_height(ans[| j]);
        }
    }
    // whitespace in between questions
    h += strH;
}

// draw the turn-in button
draw_sprite_stretched(spr_turnInButton, 0, (getDisplayRoomWidth() - buttonW) * 0.5, -scrollPos + questionY + h, buttonW, buttonH);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw scrollbar

draw_set_alpha(alpha);
var barXMin = posX + W - barW + barB;
var barXMax = posX + W - barB;
// height of scroll bar
var barH = (getDisplayRoomHeight() / totalSize) * (getDisplayRoomHeight() - barTop);
// y position of scroll bar, given scrollPos
var barY = map_range(scrollPos, -border, border + totalSize - getDisplayRoomHeight(), barTop, barBot - barH);

draw_set_color(c_dkgray);
draw_roundrect(barXMin, barY, barXMax, barY + barH, false);
draw_set_color(c_black);
draw_roundrect(barXMin, barY, barXMax, barY + barH, true);

// update scroll position
if (barDrag)
{
    scrollPos = map_range(cursor_get_y() - barDragY, barTop, barBot - barH, -border, border + totalSize - getDisplayRoomHeight());
}
scrollPos = clamp(scrollPos, -border, border + totalSize - getDisplayRoomHeight());

// handle mouse clicks
if (mouse_in_rect(barXMin, barY, barXMax - barXMin, barH))
{
    if (mouse_check_button_pressed(mb_left))
    {
        barDragY = cursor_get_y() - barY;
        barDrag = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// do nothing
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

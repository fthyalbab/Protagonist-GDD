<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_launch</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// launch button
image_speed = 0;
image_xscale = 0.6;
image_yscale = 0.6;

// don't click on the button twice
clicked = false;

// whether to rumble screen or not
rumble = false;

// surface used for rumble animation
surf = surface_create(960, 640);

// fade to black timer
state = CLOSED;
timer = 0;
duration = 15;

// whether or not to draw the blastoff image
blastOff = false;
blastOffImage = 0;

button = true;

// hide the map while the intro dialogue is playing.
hideMap = true;

// crash animation
crash = false;
crashSpd = 30;
crashAngle = 45;

// the position of the crater to hit.
targetX = 0;
targetY = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy self
if (surface_exists(surf))
{
    surface_free(surf);
}
obj_dialogue.display.allowAdvance = true;
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// crashed, so start the next phase
state = OPENING;
// set story data launch
setFlag("launched", true);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// fade to sigma forest
// play chest impact animation
state = OPENING;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// display blast off
dialogueStop();
state = OPENING;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// hades talks
dialogueTextBlock("What do you think you're doing-", "Hades", RIGHT);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// copy to surface
if (!surface_exists(surf))
{
    surf = surface_create(960, 640);
}

if (rumble)
{
    surface_copy(surf, 0, 0, application_surface);
    // Force all GUI to draw to another surface
    surface_set_target(surf);
    var this = id;
    with (all)
    {
        if (id != this)
        {
            event_perform(ev_draw, ev_gui);
        }
    }
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///if clicked on
// don't do anything if already clicked
if (clicked)
{
    exit;
}
clicked = true;

// launch the game
// stop controlling mouse
with (obj_mouseController)
{
    instance_destroy();
}

// stop music
dialogueStopAllSounds();
playClickSound();

// don't allow dialogue advance
if (instanceof(obj_dialogue.display, obj_narration))
{
    dialogueParse("text display obj_dialogueBox");
    dialogueParse("show H spr_talkHades");
    dialogueParse("with hades_swing");
}
obj_dialogue.display.allowAdvance = false;
dialogueTextBlock("!!!", "Hades", RIGHT);
// have hades talk in a little bit
alarm[0] = 45;

// rumble
rumble = true;
alarm[1] = 60;
// blast off in 2 seconds
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the button if necessary
if (button)
{
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// take the application surface and draw it rumbly
if (rumble)
{
    var r = 32;
    var x1 = irandom_range(0, 32);
    var y1 = irandom_range(0, 32);
    var x2 = getDisplayRoomWidth() - irandom_range(0, 32);
    var y2 = getDisplayRoomHeight() - irandom_range(0, 32);
    if (!surface_exists(surf))
    {
        surf = surface_create(960, 640);
    }
    draw_surface_ext(surf, -x1, -y1, getDisplayRoomWidth() / (x2 - x1), getDisplayRoomHeight() / (y2 - y1), 0, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw blast off image when necessary
if (blastOff)
{
    blastOffImage += 0.5;
    draw_sprite_ext(spr_BlastOff, blastOffImage, getDisplayRoomWidth() * 0.5,
    getDisplayRoomHeight() * 0.5, 2, 2, 1, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// fade to black when necessary
switch (state)
{
    case CLOSED:
        timer = 0;
        break;
    case OPENING:
        timer++;
        if (timer &gt;= duration)
        {
            state = CLOSING;
            // first fade to blast off
            if (!blastOff &amp;&amp; !crash)
            {
                // don't draw the button anymore
                button = false;
                // faded to black, now draw the blast off image
                blastOff = true;
                // no more rumble
                rumble = false;
                // play blast off animation for 2 seconds, then fade again
                alarm[2] = 60;
            }
            // second fade to sigma forest
            else if (!crash)
            {
                blastOff = false;
                hideMap = false;
                // deactivate the player
                instance_deactivate_object(obj_protagonist);
                // get target of the rocket
                targetX = getX(obj_craterThere) + (0.5 * obj_craterThere.sprite_width);
                targetY = getY(obj_craterThere) + (0.5 * obj_craterThere.sprite_height);
                // deactivate the skid mark
                instance_deactivate_object(obj_craterThere);
                // play rocket crashing animation
                crash = true;
                alarm[3] = 40;
            }
            // after the rocket crash animation
            else if (crash)
            {
                // activate the player
                instance_activate_object(obj_protagonist);
                // activate the skid mark
                instance_activate_object(obj_craterThere);
                // wait for particles to go away
                timer = 40;
                // destroy self alarm
                alarm[4] = 40;
            }
        }
        break;
    case CLOSING:
        timer--;
        if (timer &lt;= 0)
        {
            state = CLOSED;
        }
        break;
}

// cover screen with fade to black when needed
if (timer &gt; 0)
{
    draw_set_alpha(map_range(timer, 0, duration, 0, 1));
    draw_set_color(c_black);
    draw_rectangle(0, 0, getDisplayRoomWidth(), getDisplayRoomHeight(), false);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the rocket chest when crashing
if (crash &amp;&amp; alarm[3] &gt;= 0)
{
    var posX = targetX + lengthdir_x(alarm[3] * crashSpd, crashAngle);
    var posY = targetY + lengthdir_y(alarm[3] * crashSpd, crashAngle);
    createParticleEffect(PARTSYS_PUZ, PARTEFF_SEAR, posX - 10, posY - 10, posX + 10, posY + 10, ps_shape_ellipse, ps_distr_gaussian, 5);
    draw_sprite_ext(spr_rocket, 0, posX, posY, 1, 1, alarm[3] * 14, c_white, 1);
    if (alarm[3] == 0)
    {
        effect_create_above(ef_explosion, posX, posY, 4, c_dkgray);
        effect_create_above(ef_explosion, posX, posY, 4, c_red);
        effect_create_above(ef_explosion, posX, posY, 4, c_yellow);
        effect_create_above(ef_explosion, posX, posY, 4, c_orange);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// hide map during this scene until fade to sigma forest rocket crash
if (hideMap)
{
    draw_set_alpha(1);
    draw_set_color(c_black);
    draw_rectangle(0, 0, getDisplayRoomWidth(), getDisplayRoomHeight(), false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

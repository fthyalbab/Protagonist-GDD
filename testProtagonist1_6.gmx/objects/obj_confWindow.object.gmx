<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init

text = "";
options = noone;

state = CLOSED;

timer = 0;
duration = 10;

selected = noone;

confirmed = false;

optionsLinked = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy the options list
ds_list_destroy(options);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// click on an option
for (var i = 0; i &lt; n; i++)
{
    var option = options[| i];
    var optionX = optionsStartX + (i * (optionW + optionSepW));
    var optionY = optionsStartY;
    // check for mouse over
    if (state == OPEN &amp;&amp; point_in_rectangle(cursor_get_x(), cursor_get_y(), optionX, optionY, optionX + optionW, optionY + optionH))
    {
        selected = i;
        confirmed = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw calculations

n = ds_list_size(options);

border = 3;
textBorder = 25;

textW = string_width(text) + (2 * textBorder);
textH = string_height("|") + (2 * textBorder);

optionsTextBorder = 10;
optionW = 100 + (2 * optionsTextBorder);
optionH = string_height("|") + (2 * optionsTextBorder);
for (var i = 0; i &lt; n; i++)
{
    var option = options[| i];
    var oW = string_width(option) + (2 * optionsTextBorder);
    var oH = string_height("|") + (2 * optionsTextBorder);
    optionW = max(oW, optionW);
    optionH = max(oH, optionH);
}
// option button separation
optionSepW = 20;
optionSepH = 30;
optionBorder = 10;

// totals width of all options
optionsW = (2 * optionBorder) + (n * optionW) + ((n - 1) * optionSepW);

width = max(textW, optionsW);
height = textH + optionSepH + optionH + optionBorder;

startX = (getDisplayRoomWidth() - width) * 0.5;
startY = (getDisplayRoomHeight() - height) * 0.5;
optionsStartX = max(startX + optionBorder, startX + (width * 0.5) - (optionsW * 0.5) + optionBorder);
optionsStartY = startY + textH + optionSepH;
textX = startX + (0.5 * width);
textY = startY + textBorder;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw

// pos
var t_startY = map_range(timer, 0, duration, getDisplayRoomHeight() * 0.5, startY);
// size
var t_height = map_range(timer, 0, duration, 0, height);
// width of options boxes
var t_optionY = max(optionsStartY, map_range(timer, 0, duration, getDisplayRoomHeight() * 0.5, optionsStartY));
var t_optionW = optionW
var t_optionH = max(0, map_range(timer, 0, duration, -optionH, optionH))

// alpha of text
var t_textAlpha = map_range(timer, 0, duration, -2, 1);
// alpha of window
var t_alpha = map_range(timer, 0, duration, 0, 1);
// alpha of options buttons
var t_optionAlpha = map_range(timer, 0, duration, -3, 1);

// reset mouse over
selected = noone;

if (state == OPENING || state == OPEN || state == CLOSING)
{
    // draw back
    drawOutlineRectExt(startX, t_startY, width, t_height, border, c_black, c_white, t_alpha, t_alpha);
    // draw text
    draw_set_halign(fa_center);
    draw_set_valign(fa_top);
    draw_set_font(fnt_dialogue);
    draw_set_color(c_white);
    draw_set_alpha(t_textAlpha);
    draw_text(textX, textY, text);
    
    // draw options
    for (var i = 0; i &lt; n &amp;&amp; t_optionW &gt; 0; i++)
    {
        var option = options[| i];
        var optionX = optionsStartX + (i * (optionW + optionSepW));
        var optionY = t_optionY;
        // check for mouse over
        if (state == OPEN &amp;&amp; point_in_rectangle(cursor_get_x(), cursor_get_y(), optionX, optionY, optionX + optionW, optionY + optionH))
        {
            selected = i;
        }
        // draw option rect
        var col = c_black;
        if (selected == i)
        {
            col = c_dkgray;
        }
        drawOutlineRectExt(optionX - ((t_optionW - optionW) * 0.5), optionY - ((t_optionH - optionH) * 0.5), t_optionW, t_optionH, border, col, c_white, t_optionAlpha, t_optionAlpha);
        // draw option text
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        draw_set_font(fnt_dialogue);
        draw_set_color(c_white);
        draw_set_alpha(t_textAlpha);
        draw_text(optionX + (0.5 * optionW), optionY + (0.5 * t_optionH), option);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// state machine
switch(state)
{
    case CLOSED:
        // inactive
        selected = 0;
        confirmed = false;
        timer = 0;
        break;
    case OPENING:
        timer++;
        if (timer &gt;= duration)
        {
            state = OPEN;
        }
        break;
    case OPEN:
        timer = duration;
        break;
    case CLOSING:
        timer--;
        if (timer &lt; 0)
        {
            if (optionsLinked)
            {
                reopenOptionsMenu();
            }
            state = CLOSED;
        }
        break;
    default:
        show_error("Invalid confirmation window state: " + string(state), true);
        state = CLOSED;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

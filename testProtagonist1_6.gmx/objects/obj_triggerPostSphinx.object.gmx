<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// throw the player offscreen
delayed = true;
// do nothing for now if in combat or in transition
if (checkCombatActive() || checkRoomTransition())
{
    exit;
}

// deactivate the real player
if (!instance_exists(obj_protagonist))
{
    instance_destroy();
    exit;
}

var spr = obj_protagonist.sprite_index;
var img = obj_protagonist.image_index;
var scaleX = obj_protagonist.image_xscale;
var scaleY = obj_protagonist.image_yscale;
var X = playerX();
var Y = playerY();
instance_deactivate_object(obj_protagonist);

// create the fake player
fake = instance_create(X, Y, obj_fakeProtagonist);
fake.sprite_index = spr;
fake.image_index = img;
fake.image_xscale = scaleX;
fake.image_yscale = scaleY;

// throw the player
grav = movementAnimation(obj_gravityAnimation, fake, 0, 0, 13, 18);
grav.projX = fake.x;
grav.projY = fake.y;
grav.projVelX = -1;
grav.projVelY = 0.25;
grav.color = c_dkgray;
grav.dustY = 30;

// start transitioning room
obj_map.X -= 1;
var trans = createRoomTransition(obj_map.map[# obj_map.X, obj_map.Y], obj_blackSlideTransition,
false, 22);
trans.side = LEFT;
trans.timer = -35;

// whether or not we're on the next room or not
next = false;

// block the wall if it isn't already false
if (!ds_map_exists(obj_storyData.data, "sphinxxWall"))
{
    obj_storyData.data[? "sphinxxWall"] = true;
}

// since this ran, this is not being delayed due to in-combat or transition
delayed = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// do nothing if being delayed and check for stop delaying
if (delayed)
{
    if (!checkCombatActive() &amp;&amp; !checkRoomTransition())
    {
        event_perform(ev_create, 0);
        delayed = false;
    }
    else
    {
        exit;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// return control to player once animation is done
if (next &amp;&amp; !instance_exists(grav))
{
    instance_activate_object(obj_protagonist);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// do nothing if being delayed
if (delayed)
{
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// move player
next = true;

// deactivate the real player
var spr = obj_protagonist.sprite_index;
var img = obj_protagonist.image_index;
var scaleX = obj_protagonist.image_xscale;
var scaleY = obj_protagonist.image_yscale;
var X = 960;
var Y = 290;
instance_deactivate_object(obj_protagonist);

// create the fake player
fake = instance_create(X, Y, obj_fakeProtagonist);
fake.sprite_index = spr;
fake.image_index = img;
fake.image_xscale = scaleX;
fake.image_yscale = scaleY;

// throw the player
grav = movementAnimation(obj_gravityAnimation, fake, 0, 0, 10, 15);
grav.projX = fake.x;
grav.projY = fake.y;
grav.projVelX = -1;
grav.projVelY = 0.25;
grav.color = c_dkgray;
grav.dustY = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// do nothing if being delayed
if (delayed)
{
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set player pos after activation
if (next &amp;&amp; instance_exists(obj_protagonist))
{
    setX(obj_protagonist, fake.x);
    setY(obj_protagonist, fake.y);
    with (fake)
    {
        instance_destroy();
    }
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

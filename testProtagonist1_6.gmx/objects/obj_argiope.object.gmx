<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init

name = "The Argiope";

timer = 0;
duration = 7;

state = CLOSED;

optionsLinked = false;

animationTimer = 0;
animationSpd = 0.3;
animationDur = sprite_get_number(spr_protagChest) - 1;

dummyX = 0;
dummyY = 0;

fadeTimer = 0;
fadeDur = 7;
displayDial = false;

godAnimationTimer = 0;

spr = spr_protagChest;
dialogue = "";
playDialogue = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init the list of gods and their animations

buttonX = ds_list_create();
buttonY = ds_list_create();
buttonSpr = ds_list_create();
buttonDialogue = ds_list_create();
r = 64;

buttonX[| APOLLO] = 186;
buttonY[| APOLLO] = 124;
buttonSpr[| APOLLO] = spr_apolloChest;
buttonDialogue[| APOLLO] = "chooseApollo.protd";

buttonX[| ARTEMIS] = 358;
buttonY[| ARTEMIS] = 124;
buttonSpr[| ARTEMIS] = spr_artemisChest;
buttonDialogue[| ARTEMIS] = "chooseArtemis.protd";

buttonX[| ATHENA] = 107;
buttonY[| ATHENA] = 278;
buttonSpr[| ATHENA] = spr_athenaChest;
buttonDialogue[| ATHENA] = "chooseAthena.protd";

buttonX[| HAES] = 454;
buttonY[| HAES] = 278;
buttonSpr[| HAES] = spr_haesChest;
buttonDialogue[| HAES] = "chooseHaes.protd";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// if dialogue is done
if (!playDialogue &amp;&amp; !checkDialogueActive())
{
    /// close
    if (state == OPENING || state == OPEN)
    {
        state = CLOSING;
    }
}
// don't draw artemis if you said no
if (checkFlag("ArIntro"))
{
    buttonSpr[| ARTEMIS] = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handle click on god
if (!displayDial || fadeTimer != fadeDur)
{
    exit;
}

// check if it was on a god
var selected = noone;
for (var i = 0; i &lt; ds_list_size(buttonX); i++)
{
    if (point_in_circle(cursor_get_x(), cursor_get_y(),
    (getDisplayRoomWidth() - sprite_get_width(spr_dial)) * 0.5 + buttonX[| i],
    (getDisplayRoomHeight() - sprite_get_height(spr_dial)) * 0.5 + buttonY[| i], r))
    {
        selected = i;
    }
    // no button press if you chose artemis
    if (i == ARTEMIS &amp;&amp; checkFlag("ArIntro"))
    {
        selected = noone;
    }
}
if (selected == noone)
{
    exit;
}

// set spr and dialogue to taht god's values
displayDial = false;
spr = buttonSpr[| selected];
dialogue = buttonDialogue[| selected];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handle state
draw_set_alpha(1);
switch (state)
{
    case CLOSED:
        animationTimer = 0;
        break;
    case OPENING:
        animationTimer = 0;
        timer++;
        if (timer &gt;= duration)
        {
            dialogueStop();
            state = OPEN;
            // get position to play animation at
            dummyX = playerX() + 10;
            dummyY = playerY() + 42;
            // deactivate the player
            instance_deactivate_object(obj_protagonist);
            displayDial = true;
            spr = spr_protagChest;
            playDialogue = true;
        }
        break;
    case OPEN:
        // draw dummy
        if (godAnimationTimer == 0)
        {
            draw_sprite(spr_protagChest, animationTimer, dummyX, dummyY);
        }
        animationTimer = clamp(animationTimer + animationSpd, 0, animationDur);
        // if protagonist animation is done, display dial
        if (animationTimer &gt;= animationDur)
        {
            if (displayDial)
            {
                fadeTimer = clamp(fadeTimer + 1, 0, fadeDur);
            }
            // fade dial goes false when a god is chosen
            else
            {
                fadeTimer = clamp(fadeTimer - 1, 0, fadeDur);
            }
        }
        draw_sprite_ext(spr_dial, 0, getDisplayRoomWidth() * 0.5, getDisplayRoomHeight() * 0.5, 1, 1, 0, c_white,
        map_range(fadeTimer, 0, fadeDur, 0, 1));
        for (var i = 0; i &lt; ds_list_size(buttonX); i++)
        {
            draw_sprite_ext(spr_dialFace, i, (getDisplayRoomWidth() - sprite_get_width(spr_dial)) * 0.5 + buttonX[| i],
            (getDisplayRoomHeight() - sprite_get_height(spr_dial)) * 0.5 + buttonY[| i], 0.6, 0.6, 0, c_white,
            map_range(fadeTimer, 0, fadeDur, 0, 1));
        }
        // display god when dial is faded out
        if (!displayDial &amp;&amp; fadeTimer == 0)
        {
            godAnimationTimer = clamp(godAnimationTimer + animationSpd, 0, sprite_get_number(spr) - 1);
            draw_sprite(spr, godAnimationTimer, dummyX, dummyY);
            if (godAnimationTimer &gt;= sprite_get_number(spr) - 1 &amp;&amp; playDialogue)
            {
                show_debug_message("DIALOGUE: " + dialogue);
                playDialogue = false;
                with (obj_optionsMenu)
                {
                    instance_destroy();
                }
                if (dialogue != "")
                {
                    dialogueUnhide();
                    dialogueStop();
                    dialogueLoad(dialogue);
                    dialogueStart("", obj_dialogueBox);
                }
            }
        }
        break;
    case CLOSING:
        if (animationTimer &lt;= 0 &amp;&amp; godAnimationTimer &lt;= 0 &amp;&amp; fadeTimer &lt;= 0)
        {
            timer--;
        }
        else if (fadeTimer &gt; 0)
        {
            fadeTimer--;
            draw_sprite_ext(spr_dial, 0, getDisplayRoomWidth() * 0.5, getDisplayRoomHeight() * 0.5, 1, 1, 0, c_white,
            map_range(fadeTimer, 0, fadeDur, 0, 1));
            for (var i = 0; i &lt; ds_list_size(buttonX); i++)
            {
                draw_sprite_ext(spr_dialFace, i, (getDisplayRoomWidth() - sprite_get_width(spr_dial)) * 0.5 + buttonX[| i],
                (getDisplayRoomHeight() - sprite_get_height(spr_dial)) * 0.5 + buttonY[| i], 0.6, 0.6, 0, c_white,
                map_range(fadeTimer, 0, fadeDur, 0, 1));
            }
        }
        else if (godAnimationTimer &gt; 0)
        {
            godAnimationTimer = clamp(godAnimationTimer - animationSpd, 0, sprite_get_number(spr) - 1);
            draw_sprite(spr, godAnimationTimer, dummyX, dummyY);
        }
        else
        {
            animationTimer = clamp(animationTimer - animationSpd, 0, animationDur);
            draw_sprite(spr_protagChest, animationTimer, dummyX, dummyY);
            // reactivate the player when it's to come back
            if (animationTimer / animationSpd &lt;= 2)
            {
                instance_activate_object(obj_protagonist);
            }
        }
        if (timer &lt;= 0)
        {
            state = CLOSED;
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// if dialogue is done
if (!checkDialogueActive())
{
    /// close
    if (state == OPENING || state == OPEN)
    {
        state = CLOSING;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

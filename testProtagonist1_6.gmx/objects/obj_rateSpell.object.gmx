<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_spellEffect</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init rate spell
event_inherited();

// maximum number of stars
num = 5;
// random rating
stars = irandom_range(1, 5);

state = OPENING;
// black stars fade in (OPENING)
fadeDur = 10;
// delay between stars appearing (OPEN)
delay = 7;

timer = 0;

// the star number currently being processed
current = 0;

// border separation between stars
sep = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handle state
switch(state)
{
    case OPENING:
        // fade in black stars
        timer++;
        alpha = map_range(timer, 0, fadeDur, 0, 1);
        if (timer &gt;= fadeDur)
        {
            timer = 0;
            state = OPEN;
        }
        break;
    case OPEN:
        timer++;
        alpha = 1;
        if (timer &gt;= delay)
        {
            timer = 0;
            if (current &lt; stars)
            {
                // create the star
                var basePosX = (getDisplayRoomWidth() - (num * sprite_get_width(spr_rateSpell) + (num - 1) * sep)) * 0.5;
                var posX = basePosX + (current * (sprite_get_width(spr_rateSpell) + sep)) + (sprite_get_width(spr_rateSpell) * 0.5);
                var star = instance_create(posX, obj_spellInput.y, obj_rateSpellStar);
                star.image_index = current;
                star.targetX = targetX;
                star.targetY = targetY;
                star.action = action;
                if (current == 0)
                {
                    star.first = true;
                }
                if (current == stars - 1)
                {
                    star.last = true;
                }
                playSound(SFX, snd_ding);
                current++;
            }
            else
            {
                // fade out
                state = CLOSING;
                timer = 0;
            }
        }
        break;
    case CLOSING:
        // fade out black stars
        timer++;
        alpha = map_range(timer, 0, fadeDur, 1, 0);
        if (timer &gt;= fadeDur)
        {
            alpha = 0;
            // stick around until all stars are gone
            if (!instance_exists(obj_rateSpellStar))
            {
                instance_destroy();
            }
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw black stars
for (var i = current; i &lt; num; i++)
{
    // create the star
    var basePosX = (getDisplayRoomWidth() - (num * sprite_get_width(spr_rateSpell) + (num - 1) * sep)) * 0.5;
    var posX = basePosX + (i * (sprite_get_width(spr_rateSpell) + sep)) + (sprite_get_width(spr_rateSpell) * 0.5);
    draw_sprite_ext(spr_rateSpell, i, posX, obj_spellInput.y, 1, 1, 0, c_black, alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_timedRoomTransition</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init
event_inherited();
color = c_black;
alpha = 0;
duration = 15;
// instance open, since we want to switch rooms right away
openSpeed = duration;

// the direction to slide towards
side = RIGHT;

// surface to draw
surf = noone;

// draw position
posX = 0;
posY = 0;
viewX = 0;
viewY = 0;
viewW = getDisplayRoomWidth();
viewH = getDisplayRoomHeight();

// get old view state
view = 0;
oldViewEnabled = view_enabled;
oldViewVisible = view_visible[view];
oldViewW = view_wview[view];
oldViewH = view_hview[view];
if (oldViewEnabled &amp;&amp; oldViewVisible)
{ 
    oldViewX = view_xview[view];
    oldViewY = view_yview[view];
}
else
{
    oldViewX = 0;
    oldViewY = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// return view state to old
view_enabled = oldViewEnabled;
view_visible[view] = oldViewVisible;
view_xview[view] = oldViewX;
view_yview[view] = oldViewY;
view_wview[view] = oldViewW;
view_hview[view] = oldViewH;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// get slide coords and copy surface
// first, copy the application surface if we haven't yet
if (!surface_exists(surf) || state == OPENING)
{
    // create surface
    surf = surface_create(getDisplayRoomWidth(), getDisplayRoomHeight());
    // copy from back buffer
    surface_copy_part(surf, 0, 0, application_surface, GUIToRoomX(0), GUIToRoomY(0), GUIToRoomX(display_get_gui_width()), GUIToRoomY(display_get_gui_height()));
}
openSpeed = duration;

// timer control
event_inherited();

// calculate draw position based on side
switch (side)
{
    case RIGHT:
        // draw the surface on the left
        posX = -getDisplayRoomWidth();
        posY = 0;
        break;
    case UP:
        // draw the surface below
        posX = 0;
        posY = getDisplayRoomHeight();
        break;
    case LEFT:
        // draw the surface on the right
        posX = getDisplayRoomWidth();
        posY = 0;
        break;
    case DOWN:
        // draw the surface on top
        posX = 0;
        posY = -getDisplayRoomHeight();
        break;
}
// view goes from posX,posY to normal screen coords oldViewX,oldViewY
viewX = map_range(timer, 0, duration, oldViewX, posX);
viewY = map_range(timer, 0, duration, oldViewY, posY);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set view position
// make sure everything lays off the view position when checkRoomTransition() is true.

view_enabled = true;
view_visible[0] = true;
view_xview = viewX;
view_yview = viewY;
view_wview = viewW;
view_hview = viewH;

// draw the surface
if (surface_exists(surf))
{
    draw_surface(surf, posX, posY);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

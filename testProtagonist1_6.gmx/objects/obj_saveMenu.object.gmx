<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-11</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init save information

// the number of saves
n = 25;

selected = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init draw

name = "Save";

state = CLOSED;

timer = 0;
duration = 7;

// draw calculation
textBorder = 15;
outsideBorder = 40;
border = 3;
startX = outsideBorder;
totalHeight = getDisplayRoomHeight() - (2 * outsideBorder);

// nameplate
draw_set_font(fnt_save);
nameplateX = startX;
nameplateY = outsideBorder;
nameplateW = max(string_width(name) + (2 * textBorder), 200);
nameplateH = string_height("|") + (2 * textBorder);
nameplateSep = 10;

// window size
startY = nameplateY + nameplateH + nameplateSep;
width = getDisplayRoomWidth() - (2 * outsideBorder);
height = totalHeight - nameplateH - nameplateSep;
surfBorder = 15;
surfX = startX + border + surfBorder;
surfY = startY + border;
surfW = width - (2 * border) - (2 * surfBorder);
surfH = height - (2 * border);
scrollBarW = 15;
scrollBarH = 96;
scrollBarX = startX + width - scrollBarW - (2 * border) - (surfBorder * 0.5);

// dimensions of each save tile
saveW = surfW;
saveH = surfW / 5;
saveBorder = 5;
picX = saveBorder;
picY = saveBorder;
picH = saveH - (2 * saveBorder);
picW = picH;
saveTextSep = 10;
descX = picX + picW + saveTextSep;
descY = picY;
descH = picH;
descW = (surfW - scrollBarW - (2 * border)) - descX;
surfCap = floor(surfH / saveH) + 2;

// range of the top of the bar
barMin = surfY + border + surfBorder;
barMax = surfY + surfH - scrollBarH - (2 * border) - surfBorder;
// range of the top of the saves
saveDrawMin = -surfBorder;
saveDrawMax = (saveH * n) - surfH + surfBorder;
// the mapped range of these gives us posY and k,
// which are used to position the saves drawn on the surface.

// draw surface
surf = noone;

// scroll bar position
scrollBarPos = barMin;
scrollBarDrag = false;
scrollBarDragY = 0;
scrollWheelability = 300 / n;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// save sprite table
spritetable = ds_list_create();
for (var i = 0; i &lt; n; i++)
{
    spritetable[| i] = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// mouse click
// only do things if open
if (state == OPEN)
{
    /// if press on scrollbar
    if (point_in_rectangle(cursor_get_x(), cursor_get_y(), 
    scrollBarX, scrollBarPos, scrollBarX + scrollBarW, scrollBarPos + scrollBarH))
    {
        // we're dragging the scroll bar
        scrollBarDrag = true;
        scrollBarDragY = scrollBarPos - cursor_get_y();
        // not pressing on anything else
        exit;
    }
    
    /// if press on a save
    if (point_in_rectangle(cursor_get_x(), cursor_get_y(), surfX, surfY, surfX + surfW, surfY + surfH))
    {
        /// draw calculations
        var posY = map_range(scrollBarPos, barMin, barMax, saveDrawMin, saveDrawMax);
        var k = max(0, floor(posY / saveH));
        var surfSavePosY = (k * saveH) - posY;
        // check save positions
        var kmax = min(k + surfCap, n);
        for (var i = k; i &lt; kmax; i++)
        {
            // get position
            var savePosX = surfX;
            var savePosY = surfSavePosY + (saveH * (i - k)) + surfY;
            // if mouse on position
            if (point_in_rectangle(cursor_get_x(), cursor_get_y(), savePosX, savePosY, savePosX + saveW, savePosY + saveH))
            {
                // if we clicked the one we selected
                if (selected != noone &amp;&amp; selected == i)
                {
                    // save
                    interactSaveGame(name, selected);
                    // once we save, we're done with the save menu
                    state = CLOSING;
                }
                // otherwise, select it
                selected = i;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handle scroll bar position

// if released mouse
if (!mouse_check_button(mb_left))
{
    scrollBarDrag = false;
}
// handle dragging scroll bar
if (scrollBarDrag)
{
    scrollBarPos = cursor_get_y() + scrollBarDragY;
}
else
{
    // handle scroll wheel
    if (mouse_wheel_up())
    {
        scrollBarPos -= scrollWheelability;
    }
    if (mouse_wheel_down())
    {
        scrollBarPos += scrollWheelability;
    }
}
// clamp scroll bar
scrollBarPos = clamp(scrollBarPos, barMin, barMax);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw calculations
var posY = map_range(scrollBarPos, barMin, barMax, saveDrawMin, saveDrawMax);
var k = max(0, floor(posY / saveH));
var surfSavePosY = (k * saveH) - posY;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw to surface
if (!surface_exists(surf))
{
    surf = surface_create(surfW, surfH);
}
draw_set_alpha(1);
// only draw if necessary
if (state != CLOSED)
{
    surface_set_target(surf);
    draw_clear_alpha(c_white, 0);
    
    // draw saves
    var kmax = min(k + surfCap, n);
    for (var i = k; i &lt; kmax; i++)
    {
        // draw all unselected ones
        if (i != selected)
        {
            // get position
            var savePosX = 0;
            var savePosY = surfSavePosY + (saveH * (i - k));
            // draw save i at position
            drawSaveTile(i, savePosX, savePosY, saveW, saveH, border,
            savePosX + picX, savePosY + picY, picW, picH,
            savePosX + descX, savePosY + descY, descW, descH, textBorder, false);
        }
    }
    
    // draw the selected one
    // get position
    var savePosX = 0;
    var savePosY = surfSavePosY + (saveH * (selected - k));
    // draw save i at position
    drawSaveTile(selected, savePosX, savePosY, saveW, saveH, border,
    savePosX + picX, savePosY + picY, picW, picH,
    savePosX + descX, savePosY + descY, descW, descH, textBorder, true);
    
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw
draw_set_alpha(1);
var t_startY = map_range(timer, 0, duration, getDisplayRoomHeight() * 0.5, startY);
var t_height = map_range(timer, 0, duration, 0, height);
var t_nameplateW = map_range(timer, 0, duration, 0, nameplateW);
var t_nameplateAlpha = map_range(timer, 0, duration, -1, 1);
var t_alpha = map_range(timer, 0, duration, 0, 1);

switch(state)
{
    case CLOSED:
        selected = noone;
        timer = 0;
        break;
    case OPENING:
        // draw nameplate
        drawSaveNameplate(nameplateX, nameplateY, t_nameplateW, nameplateH, border, textBorder, name, t_nameplateAlpha, t_alpha);
        // draw window
        drawButtonRect(startX, t_startY, width - 6, t_height - 6, obj_buttons.button, c_black, c_white, t_alpha, 0);
        draw_set_alpha(t_alpha);
        draw_surface_stretched(surf, surfX, t_startY + border, surfW, t_height - (2 * border));
        drawButtonRect(startX, t_startY, width - 6, t_height - 6, obj_buttons.button, c_black, c_white, 0, t_alpha);
        timer++;
        if (timer &gt;= duration)
        {
            state = OPEN;
        }
        break;
    case OPEN:
        // draw nameplate
        drawSaveNameplate(nameplateX, nameplateY, nameplateW, nameplateH, border, textBorder, name, 1, 1);
        // draw window
        drawButtonRect(startX, startY, width - 6, height - 6, obj_buttons.button, c_black, c_white, 1, 0);
        draw_surface(surf, surfX, surfY);
        drawButtonRect(startX, startY, width - 6, height - 6, obj_buttons.button, c_black, c_white, 0, 1);
        // draw scroll bar
        draw_set_color(c_dkgray);
        draw_roundrect_ext(scrollBarX, scrollBarPos, scrollBarX + scrollBarW, scrollBarPos + scrollBarH, 10, 10, false);
        draw_set_color(c_black);
        draw_roundrect_ext(scrollBarX, scrollBarPos, scrollBarX + scrollBarW, scrollBarPos + scrollBarH, 10, 10, true);
        timer = duration;
        break;
    case CLOSING:
        // draw nameplate
        drawSaveNameplate(nameplateX, nameplateY, t_nameplateW, nameplateH, border, textBorder, name, t_nameplateAlpha, t_alpha);
        // draw window
        drawButtonRect(startX, t_startY, width - 6, t_height - 6, obj_buttons.button, c_black, c_white, t_alpha, 0);
        draw_set_alpha(t_alpha);
        draw_surface_stretched(surf, surfX, t_startY + border, surfW, t_height - (2 * border));
        drawButtonRect(startX, t_startY, width - 6, t_height - 6, obj_buttons.button, c_black, c_white, 0, t_alpha);
        timer--;
        if (timer &lt; 0)
        {
            reopenOptionsMenu();
            state = CLOSED;
        }
        break;
    default:
        show_error("Invalid inventory state: " + string(state), true);
        state = CLOSED;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// selected down
if (selected == noone)
{
    selected = 0;
}
else
{
    selected += 1;
    if (selected &lt; 0 || selected &gt;= n)
    {
        selected = noone;
    }
}

// move scroll bar
if (selected != noone)
{
    // if not within bounds
    var savePos = selected * saveH;
    var screenTop = map_range(scrollBarPos, barMin, barMax, saveDrawMin, saveDrawMax);
    var screenBot = screenTop + surfH;
    if (savePos &lt; screenTop || savePos + saveH &gt; screenBot)
    {
        scrollBarPos = map_range(savePos - (surfH - saveH), saveDrawMin, saveDrawMax, barMin, barMax);
    }
}
scrollBarPos = clamp(scrollBarPos, barMin, barMax);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// selected up
if (selected == noone)
{
    selected = n - 1;
}
else
{
    selected -= 1;
    if (selected &lt; 0 || selected &gt;= n)
    {
        selected = noone;
    }
}

// move scroll bar
if (selected != noone)
{
    // if not within bounds
    var savePos = selected * saveH;
    var screenTop = map_range(scrollBarPos, barMin, barMax, saveDrawMin, saveDrawMax);
    var screenBot = screenTop + surfH;
    if (savePos &lt; screenTop || savePos + saveH &gt; screenBot)
    {
        scrollBarPos = map_range(savePos, saveDrawMin, saveDrawMax, barMin, barMax);
    }
}
scrollBarPos = clamp(scrollBarPos, barMin, barMax);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// close
if (state == OPENING || state == OPEN)
{
    state = CLOSING;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// do the selected
if (selected != noone &amp;&amp; state == OPEN)
{
    interactSaveGame(name, selected);
    // once we save, we're done with the save menu
    state = CLOSING;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init
// draw spiral (spiral drawn to surface)
surf = noone;
radspd = 25;
// has to reach targetrad, then turn 180 degrees
w = getDisplayRoomWidth();
h = getDisplayRoomHeight();
targetrad = point_distance(0, 0, w, h) * 0.5;
tip = point_direction(w * 0.5, h * 0.5, 0, 0);
// reach tip by the time radius reaches targetrad
rot = 2;
anglespd = (rot * 360 + tip) / (targetrad / radspd);
duration = (targetrad / radspd) + (360 / anglespd) + 5;
timer = 0;
// immobilize player with its own existence (see playerCanMove())

state = OPENING;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handler target to call with prepareCombat
handler = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw opening
if (state == OPENING)
{
    timer++;
    if (timer &gt;= duration)
    {
        surface_free(surf);
        state = CLOSING;
        // transition room
        room = rm_test2;
        prepareCombat(handler);
    }
    // draw to surface
    if (!surface_exists(surf))
    {
        surf = surface_create(w, h);
    }
    surface_set_target(surf);
    // draw a triangle this step
    var X = w * 0.5;
    var Y = h * 0.5;
    var A = timer * anglespd;
    var R = timer * radspd;
    draw_set_color(c_black);
    draw_set_alpha(1);
    var res = 4;
    for (var i = 0; i &lt; res; i++)
    {
        draw_triangle(X, Y, X + lengthdir_x(R + (i / res) * radspd, A + (i / res) * anglespd), Y + lengthdir_y(R + (i / res) * radspd, A + (i / res) * anglespd),
        X + lengthdir_x(R + ((i + 1) / res) * radspd, A + ((i + 1) / res) * anglespd), Y + lengthdir_y(R + ((i + 1) / res) * radspd, A + ((i + 1) / res) * anglespd), false);
    }
    surface_reset_target();
    // draw the surface to screen
    draw_surface(surf, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw closing
/// draw opening
if (state == CLOSING)
{
    timer--;
    if (timer &lt; 0)
    {
        instance_destroy();
        exit;
    }
    draw_set_color(c_black);
    draw_set_alpha(timer / duration);
    draw_rectangle(0, 0, w, h, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-11</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init inventory
name = "Items";
// the different types of items
items = ds_map_create();

// empty inventory at first
inventory = ds_list_create();
for (var i = 0; i &lt; 10; i++)
{
    // create test items
    createItem("box" + string(i), spr_box, 0, "Box " + string(i), "The " + string(i) + "th box.", false, createStats(i, i, i, i, i));
    addItem("box" + string(i));
}
createItem("fruit", spr_duck, 0, "Fruit", "I am froot", false);
createItem("bunny", spr_dust, 0, "Dust Bunny", "Don't eat it. It'll taste terrible.", false);
selected = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init display
state = CLOSED;

width = 8;
height = 4;

descHeight = 200

totalWidth = 800;
totalHeight = 600;

border = 6;
textBorder = 15;

cellWidth = (totalWidth - ((width + 1) * border)) / width;
cellHeight = (totalHeight - descHeight - ((height + 2) * border)) / height;

startX = (room_width - totalWidth) * 0.5;
startY = (room_height - totalHeight) * 0.5;

duration = 10;
timer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set selected at mouse click
if (state == OPEN)
{
    var X = getNthCellInverse(startX, border, cellWidth, cursor_get_x());
    var Y = getNthCellInverse(startY, border, cellHeight, cursor_get_y());
    var index = XYToIndex(X, Y, width);
    // set selected index
    if (index &gt;= 0 &amp;&amp; index &lt; ds_list_size(inventory))
    {
        playClickSound();
        selected = index;
    }
    else
    {
        selected = noone;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw inventory window
// temporary calculations
var t_totalWidth = map_range(timer, 0, duration, 0, totalWidth);
var t_totalHeight = map_range(timer, 0, duration, 0, totalHeight);
var t_descHeight = t_totalHeight / 3;

var t_windowLeft = map_range(timer, 0, duration, getDisplayRoomWidth() * 0.5, 0);
var t_windowRight = map_range(timer, 0, duration, getDisplayRoomWidth() * 0.5, getDisplayRoomWidth());
var t_windowTop = map_range(timer, 0, duration, getDisplayRoomHeight() * 0.5, 0);
var t_windowBot = map_range(timer, 0, duration, getDisplayRoomHeight() * 0.5, getDisplayRoomHeight());

var t_startX = t_windowLeft + (((t_windowRight - t_windowLeft) - t_totalWidth) * 0.5);
var t_startY = t_windowTop + (((t_windowBot - t_windowTop) - t_totalHeight) * 0.5);
var t_border = map_range(timer, 0, duration, 1, 6);
var t_cellWidth = (t_totalWidth - ((width + 1) * t_border)) / width;
var t_cellHeight = (t_totalHeight - t_descHeight - ((height + 2) * t_border)) / height;

draw_set_alpha(1);

switch(state)
{
    case CLOSED:
        timer = 0;
        break;
    case OPENING:
        drawInventoryWindow(t_startX, t_startY, t_border, width, height, t_cellWidth, t_cellHeight, t_totalWidth, t_totalHeight, t_descHeight, inventory, selected, false, textBorder);
        timer++;
        if (timer &gt;= duration)
        {
            state = OPEN;
        }
        break;
    case OPEN:
        timer = duration;
        drawInventoryWindow(startX, startY, border, width, height, cellWidth, cellHeight, totalWidth, totalHeight, descHeight, inventory, selected, true, textBorder);
        break;
    case CLOSING:
        drawInventoryWindow(t_startX, t_startY, t_border, width, height, t_cellWidth, t_cellHeight, t_totalWidth, t_totalHeight, t_descHeight, inventory, selected, false, textBorder);
        timer--;
        if (timer &lt; 0)
        {
            reopenOptionsMenu();
            state = CLOSED;
        }
        break;
    default:
        show_error("Invalid inventory state: " + string(state), true);
        state = CLOSED;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// close
if (state == OPENING || state == OPEN)
{
    state = CLOSING;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

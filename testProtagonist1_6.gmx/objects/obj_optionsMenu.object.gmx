<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init. Remember this is NOT a dialogue menu.
state = CLOSED;
timer = 0;
duration = 7;

// submenus
// items, spellbook, save, load, settings, quit
submenus = ds_list_create();
ds_list_add(submenus, instance_nearest(0, 0, obj_inventory));
ds_list_add(submenus, instance_nearest(0, 0, obj_spellbook));
ds_list_add(submenus, instance_nearest(0, 0, obj_saveMenu));
ds_list_add(submenus, instance_nearest(0, 0, obj_loadMenu));
ds_list_add(submenus, instance_nearest(0, 0, obj_quitter));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// calculate draw dimensions
// how far to be from the edge of the screen
edgeBorder = 30;
n = ds_list_size(submenus);
textBorder = 5;
draw_set_font(fnt_dialogue);
// width is what the dialogue sprite doesn't take up
var sprSize = 400;
width = (room_width - sprSize) - edgeBorder;
// height is text height + textBorder
height = string_height("|") + (2 * textBorder);
// this border is just the white outline of each box
border = 3;
// calculate outsideBorder, how much space to have in between boxes
var dialogueSep = edgeBorder;
// the top of the dialogue box... we want to avoid this
var dialogueY = obj_dialogue.display.startY - obj_dialogue.display.nameSep - (string_height("|") + (2 * obj_dialogue.display.nameTextBorder));
// total space is (dialogueY - dialogueSep - edgeBorder)
// here, we solve for the space between each cell
outsideBorder = ((dialogueY - dialogueSep - edgeBorder) - (n * height)) / (n + 1);
// start at edge border
startX = edgeBorder;
startY = edgeBorder;
// set state
state = OPENING;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// free data structure
ds_list_destroy(submenus);
// if dialogue is on this menu, then stop it
if (obj_dialogue.menu == id)
{
    closeDialogueMenu();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check for click on an option
// only check for click if OPEN
if (state == OPEN)
{
    for (var i = 0; i &lt; n; i++)
    {
        var posY = getNthCell(startY, outsideBorder, height, i);
        // check if cursor in rectangle
        if (point_in_rectangle(cursor_get_x(), cursor_get_y(), startX, posY, startX + width, posY + height))
        {
            // select ith option
            var menu = submenus[| i];
            menu.state = OPENING;
            // close
            hideOptionsMenu();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw
var t_width = map_range(timer, 0, duration, 0, width);
var t_textAlpha = map_range(timer, 0, duration, -2, 1);
var t_alpha = map_range(timer, 0, duration, 0, 1);

// state machine
switch(state)
{
    case CLOSED:
        timer = 0;
        // if closed, and all submenus are closed, we're done
        var closed = true;
        for (var i = 0; i &lt; ds_list_size(submenus); i++)
        {
            var menu = submenus[| i];
            if (menu.state != CLOSED)
            {
                closed = false;
            }
        }
        // if all closed, destroy self
        if (closed)
        {
            instance_destroy();
        }
        break;
    case OPENING:
        drawOptionsMenu(submenus, n, startX, startY, t_width, height, border, outsideBorder, textBorder, true, t_textAlpha, t_alpha);
        timer++;
        if (timer &gt;= duration)
        {
            state = OPEN;
        }
        break;
    case OPEN:
        drawOptionsMenu(submenus, n, startX, startY, width, height, border, outsideBorder, textBorder, true, 1, 1);
        timer = duration;
        break;
    case CLOSING:
        drawOptionsMenu(submenus, n, startX, startY, t_width, height, border, outsideBorder, textBorder, true, t_textAlpha, t_alpha);
        timer--;
        if (timer &lt;= 0)
        {
            state = CLOSED;
        }
        break;
    default:
        show_error("Invalid menu window state: " + string(state), true);
        state = CLOSED;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// close
if (state == OPENING || state == OPEN)
{
    state = CLOSING;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

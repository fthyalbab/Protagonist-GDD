<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_apolloChariot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// apollo chariot that zooms by
startPos = getDisplayRoomWidth() + sprite_width;
endPos = -sprite_width;
timer = 0;
duration = 25;
damage = 75;

// screen fade orange
fadeTimer = 0;
fadeDur = 10;
alphaMax = 0.5;

state = OPENING;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handles opening and closing
// draw the screen fade to orange
switch (state)
{
    case OPENING:
        fadeTimer++;
        if (fadeTimer &gt;= fadeDur)
        {
            state = OPEN;
        }
        break;
    case CLOSING:
        fadeTimer--;
        if (fadeTimer &lt;= 0)
        {
            instance_destroy();
        }
        break;
}
draw_set_color(c_orange);
draw_set_alpha(alphaMax * (fadeTimer / fadeDur));
draw_rectangle(0, 0, getDisplayRoomWidth(), getDisplayRoomHeight(), false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handles open
// draw the chariot zooming across the screen

if (state != OPEN)
{
    exit;
}

timer++;
if (timer &gt;= duration)
{
    state = CLOSING;
}
// draw apollo in his position
draw_set_alpha(1);
draw_sprite(spr_apolloChariot, 0, map_range(timer, 0, duration, startPos, endPos), getDisplayRoomHeight() * 0.5);
combatDamage(getDisplayRoomWidth() * 0.5, getDisplayRoomHeight() * 0.5, damage / duration);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

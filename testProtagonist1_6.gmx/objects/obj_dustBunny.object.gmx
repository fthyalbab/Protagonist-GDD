<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dust</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init
image_speed = 0;
timer = 0;
durationMin = 30;
durationMax = 120;
duration = irandom_range(durationMin, durationMax);
hop = noone;

// detection
n = 10;

// physics
velMin = 5;
velMax = 10;
vel = irandom_range(velMin, velMax);
acc = -0.7;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// timer for jump
// only start counting down to hop if already on the ground
if (!instance_exists(hop))
{
    timer++;
}
else
{
    timer = 0; 
}
// if wants to jump
if (timer &gt;= duration)
{
    duration = irandom_range(durationMin, durationMax);
    vel = irandom_range(velMin, velMax);
    timer = 0;
    // pick offset between 0 and 360/n
    var angle = ceil(360 / n);
    var k = irandom_range(0, angle);
    var list = ds_list_create();
    var dist = 1.6 * (sqrt(2) * lengthdir_y(vel, 45) / acc) * lengthdir_x(vel, 45);
    for (var i = k; i &lt; k + 360; i += angle)
    {
        // check position for no collision and inside screen
        if (!collision_point(getX(id) + lengthdir_x(dist, i), getY(id) + lengthdir_y(dist, i), obj_solid, false, true)
        &amp;&amp; point_in_rectangle(getX(id) + lengthdir_x(dist, i), getY(id) + lengthdir_y(dist, i), 0, 0, room_width, room_height))
        {
            // if valid, add to list
            ds_list_add(list, i);
        }
    }
    // choose a place to hop to
    if (!ds_list_empty(list))
    {
        var chosenAngle = list[| irandom_range(0, ds_list_size(list))];
        ds_list_destroy(list);
        hop = movementAnimation(obj_hopAnimation, id, 0, 0, vel * sqrt(2) * 0.5, vel * sqrt(2) * 0.5);
        hop.projVelX = lengthdir_x(1, chosenAngle);
        hop.projVelY = lengthdir_y(1, chosenAngle);
        hop.projX = getX(id);
        hop.projY = getY(id);
        hop.AccY = acc;
    }
}

// clamp position
setX(id, clamp(getX(id), 0, room_width));
setY(id, clamp(getY(id), 0, room_height));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// manage image index
image_index = 0;
if (instance_exists(hop))
{
    if (hop.VelY &gt; 0)
    {
        image_index = 1;
    }
    if (hop.VelY &lt; 0)
    {
        image_index = 2;
    }
    if (hop.projVelX &gt;= 0)
    {
        image_xscale = abs(image_xscale);
    }
    else
    {
        image_xscale = -abs(image_xscale);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// depth control
depthify();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// get picked up when contact player
if (distance_to_object(obj_protagonist) &lt; 10)
{
    addNotification(createNotification("You picked up a dust bunny!"));
    addItem("bunny");
    obj_storyData.pickedUp[# obj_map.X, obj_map.Y] = true;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw
draw_sprite_ext(sprite_index, image_index, round(getX(id)), round(getY(id)), image_xscale, image_yscale, image_angle, image_blend, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-200</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// fade duration values
fadeDur = 90;
fadeInSpd = 15;
fadeOutSpd = 1;
holdSpd = 3;

state = OPENING;

timer = 0;

duration = fadeDur;

playSound(SFX, snd_oof);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handle state
switch (state)
{
    case OPENING:
        timer += fadeInSpd;
        draw_set_alpha(timer / fadeDur);
        draw_set_color(c_black);
        draw_rectangle(0, 0, getDisplayRoomWidth(), getDisplayRoomHeight(), false);
        draw_set_alpha(2 * timer / fadeDur);
        draw_set_color(c_red);
        draw_rectangle(0, 0, getDisplayRoomWidth(), getDisplayRoomHeight(), false);
        if (timer &gt; fadeDur)
        {
            timer = fadeDur;
            state = OPEN;
            dialogueStop();
            hadesSpecialTestExtravaganza();
        }
        break;
    case OPEN:
        timer -= holdSpd;
        draw_set_alpha(1);
        draw_set_color(c_black);
        draw_rectangle(0, 0, getDisplayRoomWidth(), getDisplayRoomHeight(), false);
        draw_set_alpha((timer - fadeDur * 0.7) / (fadeDur * 0.3));
        draw_set_color(c_red);
        draw_rectangle(0, 0, getDisplayRoomWidth(), getDisplayRoomHeight(), false);
        if (timer &lt;= 0)
        {
            timer = fadeDur;
            state = CLOSING;
        }
        break;
    case CLOSING:
        draw_set_alpha(timer / fadeDur);
        draw_set_color(c_black);
        draw_rectangle(0, 0, getDisplayRoomWidth(), getDisplayRoomHeight(), false);
        timer -= fadeOutSpd;
        if (timer &lt;= 0)
        {
            timer = 0;
            state = CLOSED;
        }
        break;
    case CLOSED:
        instance_destroy();
        exit;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

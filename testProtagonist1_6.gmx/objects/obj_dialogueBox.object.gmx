<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init
// hiding or not
hide = false;
wait = noone;

// show or hide name, text, and window
showName = false;
showText = false;
showWindow = false;

// full block of text to be displayed
text = "";
// what is being showed
currentText = "";
// name to display
name = "";
nameR = "";

// text incrementing (typewriter effect)
textshow = 0;
textspeed = 2;

// whether or not to automatically advance
autoAdvance = false;
autoAdvanceTimer = autoAdvance;

// allow advance or not
allowAdvance = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw options

// window height
height = 200;
outsideBorder = 10;
// width takes up entire width
width = room_width - (2 * outsideBorder);
// position it on the screen
startX = outsideBorder;
startY = room_height - height - outsideBorder;
textBorder = 20;
nameTextBorder = 10;
border = 3;

// name goes above (auto based on font height)
// vertical separation of name from window
nameSep = outsideBorder;
nameMinWidth = 200;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// open/closed state
state = CLOSED;
timer = 0;
duration = 10;

status = STOP;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// auto-advance if necessary
if (obj_dialogue.active)
{
    // if done with current string
    if (string_length(currentText) &gt;= string_length(text) - 1)
    {
        // auto advance only if setting is 1 or above
        if (autoAdvance &gt; 0)
        {
            if (autoAdvanceTimer &lt;= 1)
            {
                autoAdvanceTimer = autoAdvance;
                // if not in a menu, advance
                if (!dialogueCheckMenu())
                {
                    dialogueAdvance();
                }
            }
            // tick down until advance
            else
            {
                autoAdvanceTimer--;
            }
        }
    }
    // if string isn't full, reset timer
    else
    {
        autoAdvanceTimer = autoAdvance;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// skip dialogue by holding Ctrl
if (obj_dialogue.active &amp;&amp; allowAdvance)
{
    // if done with current string
    if (string_length(currentText) &gt;= string_length(text) - 1)
    {
        // if not in a menu, advance
        if (!dialogueCheckMenu())
        {
            dialogueAdvance();
        }
    }
    // show more text
    else
    {
        textshow += 20;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// advance dialogue by mouse click
if (obj_dialogue.active &amp;&amp; allowAdvance)
{
    // if done with current string
    if (string_length(currentText) &gt;= string_length(text) - 1)
    {
        // if not in a menu, advance
        if (!dialogueCheckMenu())
        {
            dialogueAdvance();
        }
    }
    // show more text
    else
    {
        textshow += 20;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// end dialogue
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// start dialogue
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// display windows

draw_set_font(fnt_dialogue);
// partially open
var t_startY = map_range(timer, 0, duration, mean(startY, startY + width), startY);
var t_height = map_range(timer, 0, duration, 0, height);
var t_nameH = map_range(timer, 0, duration, 0, string_height("|") + (2 * nameTextBorder));
var t_textalpha = map_range(timer, 0, duration, -2, 1);

// find left name box position
var t_nameY = t_startY - nameSep - t_nameH;
var nameW = max(nameMinWidth, string_width(name) + (3 * nameTextBorder));
// find right name box X position
var nameWR = max(nameMinWidth, string_width(nameR) + (3 * nameTextBorder));
var t_nameRX = startX + width - nameWR;

// window is fully opaque
draw_set_alpha(1);

// name
if (showName &amp;&amp; name != "")
{
    drawDialogueWindow(startX, t_nameY, border, nameW, t_nameH);
}
if (showName &amp;&amp; nameR != "")
{
    drawDialogueWindow(t_nameRX, t_nameY, border, nameWR, t_nameH);
}

// window but no text
if (showWindow)
{
    drawDialogueWindow(startX, t_startY, border, width, t_height);
}

// text fades in
draw_set_alpha(t_textalpha);

// state machine
switch(state)
{
    case CLOSED:
        timer = 0;
        // hide all
        showName = false;
        showText = false;
        showWindow = false;
        // closing sequence
        if (status == STOP)
        {
            event_user(1);
            status = NORMAL;
        }
        // automatically destroy self if not the dialogue box
        if (status == NORMAL &amp;&amp; obj_dialogue.display != id)
        {
            instance_destroy();
        }
        break;
    case OPENING:
        // entrance sequence
        if (status == START)
        {
            event_user(0);
            status = NORMAL;
        }
        // timer
        // open if not waiting
        if (!checkDialogueWait())
        {
            timer++;
        }
        if (timer &gt;= duration)
        {
            state = OPEN;
        }
        // show all
        showName = true;
        showText = true;
        showWindow = true;
        drawDialogueText(startX, t_nameY, border, nameW, t_nameH, name, fnt_dialogue, nameTextBorder);
        drawDialogueText(t_nameRX, t_nameY, border, nameWR, t_nameH, nameR, fnt_dialogue, nameTextBorder);
        drawDialogueText(startX, t_startY, border, width, t_height, currentText, fnt_dialogue, textBorder);
        break;
    case OPEN:
        // show all
        showName = true;
        showText = true;
        showWindow = true;
        timer = duration;
        drawDialogueText(startX, t_nameY, border, nameW, t_nameH, name, fnt_dialogue, nameTextBorder);
        drawDialogueText(t_nameRX, t_nameY, border, nameWR, t_nameH, nameR, fnt_dialogue, nameTextBorder);
        drawDialogueText(startX, t_startY, border, width, t_height, currentText, fnt_dialogue, textBorder);
        break;
    case CLOSING:
        // close if not waiting
        if (!checkDialogueWait())
        {
            timer--;
        }
        if (timer &lt; 0)
        {
            state = CLOSED;
        }
        // show all
        showName = true;
        showText = true;
        showWindow = true;
        drawDialogueText(startX, t_nameY, border, nameW, t_nameH, name, fnt_dialogue, nameTextBorder);
        drawDialogueText(t_nameRX, t_nameY, border, nameWR, t_nameH, nameR, fnt_dialogue, nameTextBorder);
        drawDialogueText(startX, t_startY, border, width, t_height, currentText, fnt_dialogue, textBorder);
        break;
    default:
        show_error("Invalid dialogue window state: " + string(state), true);
        state = CLOSED;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// advance dialogue by space press
if (obj_dialogue.active &amp;&amp; allowAdvance)
{
    // if done with current string
    if (string_length(currentText) &gt;= string_length(text) - 1)
    {
        // if not in a menu, advance
        if (!dialogueCheckMenu())
        {
            dialogueAdvance();
        }
    }
    // show more text
    else
    {
        textshow += 20;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// advance dialogue by esc press
if (obj_dialogue.active &amp;&amp; allowAdvance)
{
    // if done with current string
    if (string_length(currentText) &gt;= string_length(text) - 1)
    {
        // if not in a menu, advance
        if (!dialogueCheckMenu())
        {
            dialogueAdvance();
        }
    }
    // show more text
    else
    {
        textshow += 20;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

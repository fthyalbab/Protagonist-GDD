<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw settings
image_speed = 0;
VelX = 0;
VelY = 0;
rot = 0;
exploded = false;
damageTimer = 0;
damageDur = 10;
damaged = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw cat part of hp bar
if (sprite_exists(sprite_index))
{
    image_alpha = 1;
    image_index = 0;
    var dam = false;
    if (object_index == obj_synHead)
    {
        with (obj_syntaxBoss)
        {
            if ((object_index != obj_synHead) &amp;&amp; damaged)
            {
                dam = true;
            }
        }
        if (dam &amp;&amp; !damaged)
        {
            image_index = 2;
        }
        else
        {
            image_index = 0;
        }
    }
    draw_self();
    
    if (damaged)
    {
        image_alpha = random_range(0.4, 0.7);
        image_index = 1;
        draw_self();
        damageTimer--;
        if (damageTimer &lt;= 0)
        {
            damaged = false;
        }
    }
}
if (object_index == obj_synHead)
{
    if (instance_exists(obj_combatPuzzle))
    {
        drawHealthBar(obj_synHead.x - 5, obj_synHead.y - 35, obj_synHead.sprite_width - 35, 20,
        obj_combatPuzzle.enemyHP, obj_combatPuzzle.enemyHP + obj_combatPuzzle.enemyDamaged, obj_combatPuzzle.enemyMaxHP);
    }
}

// explode at the end
if (instance_exists(obj_combatPuzzle))
{
    if (!exploded &amp;&amp; obj_combatPuzzle.enemyHP &lt;= 0)
    {
        var centerX = x + (0.5 * sprite_width);
        var centerY = y + (0.5 * sprite_height);
        var dir = point_direction(getDisplayRoomWidth() * 0.5, getDisplayRoomHeight(), centerX, centerY);
        VelX = lengthdir_x(20, dir);
        VelY = lengthdir_y(20, dir);
        exploded = true;
    }
}

x += VelX;
y += VelY;
if (exploded)
{
    VelY += 1;
}
image_angle += rot;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_attack</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init the attack
// randomly generate a meow string
// display it

// create the puzzle string
var n = 6;
var diff = irandom_range(0, n - 1);
for (var i = 0; i &lt; n; i++)
{
    // if a normal meow string
    if (i != diff)
    {
        createLetterString(irandom_range(40, 120), 30 + ((i + 1) * 60), "meow meow meow meow", false, 2, 60, 0.68, "", obj_sphinxAttackLetter);
    }
    // if a changed meow string
    else
    {
        // change one of the meow's
        var diffStr = "";
        var m = 4;
        var mdiff = irandom_range(0, m - 1);
        for (var j = 0; j &lt; m; j++)
        {
            // if a normal meow
            if (j != mdiff)
            {
                diffStr += "meow";
            }
            // if a different meow
            else
            {
                // change e
                if (irandom_range(0, 2) == 0)
                {
                    diffStr += "meew";
                    typoStart = (j * 5) + 1;
                    typoStop = typoStart + 1;
                }
                // change o
                else
                {
                    diffStr += "moow";
                    typoStart = (j * 5) + 1;
                    typoStop = typoStart + 1;
                }
            }
            // add a space if necessary
            if (j != m - 1)
            {
                diffStr += " ";
            }
        }
        createLetterString(irandom_range(40, 120), 30 + ((i + 1) * 60), diffStr, false, 2, 60, 0.68, "", obj_sphinxAttackLetter);
        typoStr = diffStr;
    }
}
/// timer for converting letters to attacks
timer = 0;
duration = 20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// choose an unstable letter to turn into an attack
var attackLetters = ds_list_create();
var succStart = typoStart;
var succStop = typoStop;
var succStr = typoStr;
with (obj_sphinxAttackLetter)
{
    if ((str != succStr || pos &lt; succStart || pos &gt; succStop) &amp;&amp; attackTimer &gt;= attackDuration)
    {
        ds_list_add(attackLetters, id);
    }
}

if (!ds_list_empty(attackLetters))
{
timer++;
    if (timer &gt; duration)
    {
        timer = 0;
        var attackLetter = attackLetters[| irandom_range(0, ds_list_size(attackLetters) - 1)];
        with (attackLetter)
        {
            attack = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// after spell is cast, on first hit
// if hit the right letter
var success = false;
var succStart = typoStart;
var succStop = typoStop;
var targetStr = typoStr;
var posX = X;
var posY = Y;
with (obj_sphinxAttackLetter)
{
    if (!spell)
    {
        // if within hitbox
        if (point_in_rectangle(posX, posY, getX(id) - 0.5 * sprite_width, getY(id) - 0.5 * sprite_height,
        getX(id) + 0.5 * sprite_width, getY(id) + 0.5 * sprite_height))
        {
            // check position
            if (str == targetStr &amp;&amp; pos &gt;= succStart &amp;&amp; pos &lt;= succStop)
            {
                success = true;
            }
        }
    }
}

// end puzzle if right letter was hit
if (success)
{
    // make the letters flicker
    var ef = createGroupEffect(obj_spellHitEffect, ds_list_create());
    with (obj_spellString)
    {
        // add contents to effect list
        for (var i = 0; i &lt; ds_list_size(list); i++)
        {
            ds_list_add(ef.list, list[| i]);
        }
        // remove the spellString
        instance_destroy();
    }
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init
// list of letter objects
spell = ds_list_create();

// max size
maxsize = 7;

// spell character updater
letterUpdate = 3;
alarm[0] = letterUpdate;

// letter delay during fire
delay = 5;

// action after last letter hits
action = "";
last = noone;
first = noone;

// target
targetX = 0;
targetY = 0;

// spell cast or not
spellCast = false;

// active or not
active = true;

// letters
letters = ds_list_create();
letterCooldowns = ds_map_create();
var key = ds_map_find_first(obj_spellbook.letters);
for (var i = 0; i &lt; ds_map_size(obj_spellbook.letters); i++)
{
    if (obj_spellbook.letters[? key])
    {
        var index = spellSearchInsert(key, letters);
        ds_list_insert(letters, index, key);
        letterCooldowns[? key] = 0;
    }
    key = ds_map_find_next(obj_spellbook.letters, key);
}
letterCooldowns[? key] = irandom_range(0, 100);
recovery = 800;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// clean up
for (var i = 0; i &lt; ds_list_size(spell); i++)
{
    with (spell[| i])
    {
        instance_destroy();
    }
}
ds_list_clear(spell);
ds_list_destroy(spell);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// recover broken letters
// for every letter
for (var i = 0; i &lt; ds_list_size(obj_spellInput.letters); i++)
{
    var c = obj_spellInput.letters[| i];
    // if letter is broken, recover it slowly
    var heat = obj_spellInput.letterCooldowns[? c];
    if (heat &lt; 0)
    {
        obj_spellInput.letterCooldowns[? c] = min(obj_spellInput.letterCooldowns[? c] + 1, 0);
    }
    // if letter is not broken, decrease heat slowly
    if (heat &gt; 0)
    {
        obj_spellInput.letterCooldowns[? c] = max(obj_spellInput.letterCooldowns[? c] - 0.07, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handle end-of-cast action
if (action != "")
{
    // if no spell was cast handle letters. Otherwise, the spell will handle it.
    if (!spellCast)
    {
        if ((!instance_exists(first) || !first.active) &amp;&amp; first != noone)
        {
            combatEndCast(targetX, targetY, action);
            first = noone;
        }
        if ((!instance_exists(last) || !last.active) &amp;&amp; last != noone)
        {
            combatLastCast(targetX, targetY, action);
            last = noone;
        }
    }
    // otherwise, once all spell effects are done, release hold to allow more typing
    else
    {
        if (instance_number(obj_spellEffect) == 0)
        {
            first = noone;
            last = noone;
        }
    }
    if (first == noone &amp;&amp; last == noone)
    {
        for (var i = 0; i &lt; ds_list_size(spell); i++)
        {
            var letter = spell[| i];
            with (letter)
            {
                remove = true;
            }
        }
        ds_list_clear(spell);
        action = "";
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// only allow input if active
if (!active || checkCombatPause())
{
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handle key presses

// not waiting on an action to take
if (action == "")
{
    // check every keyboard letter
    for (var i = ord('A'); i &lt;= ord('Z'); i++)
    {
        // if maxsize isn't met, and key is pressed, and player owns that letter, and it isn't broken
        var char = string_lower(chr(i));
        if (ds_list_size(spell) &lt; maxsize &amp;&amp; keyboard_check_pressed(i) &amp;&amp;
        ds_map_exists(obj_spellbook.letters, char) &amp;&amp; 
        obj_spellbook.letters[? char] &amp;&amp; obj_spellInput.letterCooldowns[? char] &gt;= 0)
        {
            ds_list_add(spell, createLetter(x + (ds_list_size(spell) * sprite_get_width(spr_Spells)), y, char));
        }
    }
    
    // delete letter on backspace
    if (keyboard_check_pressed(vk_backspace))
    {
        with(spell[| ds_list_size(spell) - 1])
        {
            instance_destroy();
        }
        ds_list_delete(spell, ds_list_size(spell) - 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// only allow input if active
if (!active || checkCombatPause())
{
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// fire
// don't do anything if empty
if (ds_list_size(spell) == 0 || first != noone || last != noone)
{
    exit;
}
action = "";
// get action
for (var i = 0; i &lt; ds_list_size(spell); i++)
{
    var letter = spell[| i];
    action += letter.value;
}
targetX = cursor_get_x();
targetY = cursor_get_y();

// fire action, whatever it is
spellCast = combatStartCast(targetX, targetY, action);

var obj = obj_letterFired;
if (spellCast)
{
    obj = obj_letterFaded;
}

// letter throw if necessary
for (var i = 0; i &lt; ds_list_size(spell); i++)
{
    var letter = spell[| i];
    if (instance_exists(letter))
    {
        // reset timer
        letter.timer = 0;
        // flash to normal letters
        letter.state = SPELLIMAGE_OBSCURED;
        letter.flash = true;
        // set target
        letter.targetX = targetX;
        letter.targetY = targetY;
        // use delay to fire letters one by one
        letter.delay = i * delay;
        // letters to keep track of
        if (first == noone)
        {
            first = letter;
        }
        last = letter;
    }
    with (letter)
    {
        instance_change(obj, true);
        startX = x;
        startY = y;
        scaleX = image_xscale;
        scaleY = image_yscale;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the letters you can use
spellScale = 0.5;
bordW = 3;
bordH = 3;
listW = (sprite_get_width(spr_Spells) * spellScale * ds_list_size(letters)) + (2 * bordW);
listH = (sprite_get_height(spr_Spells) * spellScale * 1) + (2 * bordH);

posX = getDisplayRoomWidth() - listW - 40;
// for athena test, make room for the minimize button
if (!checkCombatActive())
{
    posX -= 36;
}
posY = 8;

draw_set_alpha(1);
draw_set_color(c_black);
draw_rectangle(posX, posY, posX + listW, posY + listH, true);

for (var i = 0; i &lt; ds_list_size(letters); i++)
{
    var c = letters[| i];
    var heat = obj_spellInput.letterCooldowns[? c];
    var color = c_white;
    // if not broken
    if (heat &gt;= 0)
    {
        // color indicates chance of breakage
        color = make_colour_hsv(0, clamp(map_range(heat, 0, 100, 0, 255), 0, 255), 255);
    }
    // if broken
    else
    {
        color = c_black;
    }
    draw_sprite_ext(spr_Spells, ord(c) - ord('a'), posX + (i * sprite_get_width(spr_Spells) * spellScale) + bordW, posY + bordH, spellScale, spellScale, 0, color, 1);
    // if broken but returning
    if (heat &lt; 0 &amp;&amp; heat &gt;= -45)
    {
        // flicker to indicate coming back
        draw_sprite_ext(spr_Spells, ord(c) - ord('a'), posX + (i * sprite_get_width(spr_Spells) * spellScale) + bordW, posY + bordH, spellScale, spellScale, 0, c_white, random_range(0, 0.7));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// only allow input if active
if (!active || checkCombatPause())
{
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// fire
// don't do anything if empty
if (ds_list_size(spell) == 0 || first != noone || last != noone)
{
    exit;
}
action = "";
// get action
for (var i = 0; i &lt; ds_list_size(spell); i++)
{
    var letter = spell[| i];
    action += letter.value;
}
targetX = cursor_get_x();
targetY = cursor_get_y();

// fire action, whatever it is
spellCast = combatStartCast(targetX, targetY, action);

var obj = obj_letterFired;
if (spellCast)
{
    obj = obj_letterFaded;
}

// letter throw if necessary
for (var i = 0; i &lt; ds_list_size(spell); i++)
{
    var letter = spell[| i];
    if (instance_exists(letter))
    {
        // reset timer
        letter.timer = 0;
        // flash to normal letters
        letter.state = SPELLIMAGE_OBSCURED;
        letter.flash = true;
        // set target
        letter.targetX = targetX;
        letter.targetY = targetY;
        // use delay to fire letters one by one
        letter.delay = i * delay;
        // letters to keep track of
        if (first == noone)
        {
            first = letter;
        }
        last = letter;
    }
    with (letter)
    {
        instance_change(obj, true);
        startX = x;
        startY = y;
        scaleX = image_xscale;
        scaleY = image_yscale;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

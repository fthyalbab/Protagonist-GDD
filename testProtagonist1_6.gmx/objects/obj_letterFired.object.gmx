<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Spells</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init
image_speed = 0;

// outline
startX = 0;
startY = 0;
scaleX = 0;
scaleY = 0;

// fire delay
fireTimer = 0;

// speed when moving
acc = 0.3;
maxspd = 20;
spd = 0;
angspd = irandom_range(6, 10);
shrink = 0.03;

// after-fire removal
remove = false;
removeTimer = 0;
removeDur = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// end and explode
effect_create_above(ef_explosion, x, y, image_xscale, c_black);
effect_create_above(ef_explosion, x, y, image_xscale, make_color_rgb(200, 228, 7));
// create fragments
var n = irandom_range(3, 6);
for (var i = 0; i &lt; 360; i += 360 / n)
{
    var dir = i + irandom_range(-n / 360, n / 360);
    var f = instance_create(GUIToRoomX(x), GUIToRoomY(y), obj_spellFragment);
    f.dir = dir;
    f.image_xscale = image_xscale;
    f.image_yscale = image_yscale;
    f.spd = f.spd * image_xscale;
}
active = false;
combatDamage(x, y, 1);
exit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update animation
switch (state)
{
    case SPELLIMAGE_NORMAL:
        // end flash
        flash = false;
        // don't leave normal if firing
        if (timer &gt; normalDur &amp;&amp; false)
        {
            timer = 0;
            normalDur = irandom_range(normalMin, normalMax);
            state = normalTarget;
            break;
        }
        timer += normalSpd;
        break;
        
    case SPELLIMAGE_GREEK:
        if (timer &gt; greekDur)
        {
            timer = 0;
            greekDur = irandom_range(greekMin, greekMax);
            // finished greek section, start flash
            flash = true;
            state = greekTarget;
            break;
        }
        timer += greekSpd;
        break;
        
    case SPELLIMAGE_OBSCURED:
        if (timer &gt; obscureDur)
        {
            timer = 0;
            // if just starting flash, go to normal state
            if (flash)
            {
                state = obscureTargetFlash;
            }
            // otherwise go to greek state
            else
            {
                state = obscureTarget;
            }
            break;
        }
        timer += obscureSpd;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// fire animation
if (state == SPELLIMAGE_NORMAL &amp;&amp; active)
{
    fireTimer++;
    if (fireTimer &gt;= delay)
    {
        // accelerate
        spd += (maxspd - spd) * acc;
        var dir = point_direction(x, y, targetX, targetY);
        var dist = point_distance(x, y, targetX, targetY);
        if (dist &lt;= spd)
        {
            x = targetX;
            y = targetY;
            //explode
            event_user(0);
        }
        // move
        x += lengthdir_x(spd, dir);
        y += lengthdir_y(spd, dir);
        // shrink
        image_xscale += -shrink * sign(image_xscale) * abs(image_xscale);
        image_yscale += -shrink * sign(image_yscale) * abs(image_yscale);
        // rotate
        image_angle += angspd;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw to screen

var alpha = image_alpha;
if (remove)
{
    removeTimer++;
    if (removeTimer &gt; removeDur)
    {
        instance_destroy();
    }
    alpha = map_range(removeTimer, 0, removeDur, image_alpha, 0);
}
draw_sprite_offset_ext(sprite_index, letterValue(value) + state, startX, startY,
sprite_get_width(sprite_index) * 0.5, sprite_get_height(sprite_index) * 0.5,
scaleX, scaleY, 0, c_black, alpha);

if (value != '' &amp;&amp; active)
{
    draw_sprite_offset_ext(sprite_index, letterValue(value) + state, x, y,
    sprite_get_width(sprite_index) * 0.5, sprite_get_height(sprite_index) * 0.5,
    image_xscale, image_yscale, image_angle, image_blend, image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// do nothing, draw GUI does the work
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

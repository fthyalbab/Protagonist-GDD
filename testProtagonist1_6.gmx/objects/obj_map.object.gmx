<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init player position in map
X = 2;
Y = 2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init map
map = ds_grid_create(4, 3);
map[# 2, 2] = rm_forest1;
map[# 2, 1] = rm_forest2;
map[# 2, 0] = rm_forest3;
map[# 1, 0] = rm_forest4;
map[# 0, 0] = rm_forest5;
map[# 0, 1] = rm_forest6;
map[# 0, 2] = rm_forest7;
map[# 1, 2] = rm_forest8;
map[# 3, 0] = rm_forest9;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// room border
upper = 128;
lower = room_height - 32;
left = 32;
right = room_width - 32;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// transition between room when player exits
if (instance_number(obj_protagonist) &gt; 0 &amp;&amp; playerCanMove())
{
    var w = sprite_get_width(obj_protagonist.sprite_index);
    if (!point_in_rectangle(playerX(), playerY(), left, upper, right, lower))
    {
        if (!checkRoomTransition())
        {
            var side = noone;
            if (playerX() &lt; left)
            {
                side = LEFT;
                X -= 1;
            }
            else if (playerX() &gt; right)
            {
                side = RIGHT;
                X += 1;
            }
            else if (playerY() &lt; upper)
            {
                side = UP;
                Y -= 1;
            }
            else if (playerY() &gt; lower)
            {
                side = DOWN;
                Y += 1;
            }
            var trans = createRoomTransition(map[# X, Y], obj_blackSlideTransition, 30);
            trans.side = side;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handle player enter/exit room animation
if (instance_exists(obj_roomTransition) &amp;&amp; instance_exists(obj_protagonist))
{
    var trans = instance_nearest(0, 0, obj_roomTransition);
    // if transitioning into the new room, walk in
    var b = 32;
    if (trans.state == CLOSING)
    {
        switch (trans.side)
        {
            case RIGHT:
                setX(obj_protagonist, map_range(trans.timer, trans.duration, 0, 0, left + b));
                setY(obj_protagonist, room_height * 0.5);
                break;
            case LEFT:
                setX(obj_protagonist, map_range(trans.timer, trans.duration, 0, room_width, right - b));
                setY(obj_protagonist, room_height * 0.5);
                break;
            case DOWN:
                setY(obj_protagonist, map_range(trans.timer, trans.duration, 0, 0, upper + b));
                setX(obj_protagonist, room_width * 0.5);
                break;
            case UP:
                setY(obj_protagonist, map_range(trans.timer, trans.duration, 0, room_height, lower - b));
                setX(obj_protagonist, room_width * 0.5);
                break;
        }
    }
    // otherwise, walk out
    else
    {
        var b = 80;
        switch (trans.side)
        {
            case LEFT:
                setX(obj_protagonist, map_range(trans.timer, trans.duration, 0, left - b, left));
                break;
            case RIGHT:
                setX(obj_protagonist, map_range(trans.timer, trans.duration, 0, right + b, right));
                break;
            case UP:
                setY(obj_protagonist, map_range(trans.timer, trans.duration, 0, upper - b, upper));
                break;
            case DOWN:
                setY(obj_protagonist, map_range(trans.timer, trans.duration, 0, lower + b, lower));
                break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

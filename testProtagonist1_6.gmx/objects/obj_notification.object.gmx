<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-200</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// basic notification init

// complete or not (if complete or nonexistent, obj_notifications moves on)
complete = false;

timer = 0;
inDur = 15;
stayDur = 30;
outDur = 15;

// offscreen x
x = -getDisplayRoomWidth();
// constant y
y = getDisplayRoomHeight() * 0.13;
// center
targetX = getDisplayRoomWidth() * 0.5;

// notification data, initialized later
notification = noone;

// draw stuff
border = 3;
textBorder = 15;
font = fnt_save;

// width and height, to be set later
w = 0;
h = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// clean up
if (ds_exists(notification, ds_type_map))
{
    ds_map_destroy(notification);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw
// can't draw notification if there isn't one
if (!ds_exists(notification, ds_type_map) || complete)
{
    complete = true;
    instance_destroy();
    exit;
}

var str = notification[? NOTIFICATION_STR];
draw_set_font(font);
draw_set_halign(fa_center);
draw_set_valign(fa_center);
w = string_width(str) + (2 * textBorder);
h = string_height(str) + (2 * textBorder);
drawButtonRect(x - (0.5 * w), y - (0.5 * h), w - 6, h - 6, obj_buttons.button, c_white, c_white, 1, 1);
draw_set_color(c_white);
draw_set_alpha(1);
draw_text(x, y, str);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handle notification animation

// end of animation
if (timer &gt; inDur + stayDur + outDur)
{
    complete = true;
}
// out
else if (timer &gt; inDur + stayDur)
{
    x = map_range(timer - (inDur + stayDur), 0, outDur,
    targetX, getDisplayRoomWidth() + (w * 0.5));
}
// stay
else if (timer &gt; inDur)
{
    x = targetX;
}
// in
else
{
    x = map_range(timer, 0, inDur,
    -(w * 0.5), targetX);
}

// increment timer, to advance animation
timer++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

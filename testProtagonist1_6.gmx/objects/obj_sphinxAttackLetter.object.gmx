<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Spells</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_letter</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init letter that changes color and wiggles over time
event_inherited();

// how long this letter will take to have a chance of becoming an attack
attackDuration = irandom_range(200, 1000);
attackTimer = irandom_range(-100, -70);

// if this letter is an attack
attack = false;

// get starting pos, for wiggle
initialX = x;
initialY = y;

// attack target
attackTargetX = (getDisplayRoomWidth() * 0.5) + irandom_range(-150, 150);
attackTargetY = getDisplayRoomHeight();

rot = ((irandom_range(0, 1) * 2) - 1) * irandom_range(15, 30);
spd = 15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// change color and wiggle

if (!attack)
{
    image_blend = make_colour_hsv(0, clamp(map_range(clamp(attackTimer, 0, attackDuration), 0, attackDuration, 0, 255), 0, 255), 255);
    var wiggle = map_range(max(0, attackTimer), 0, attackDuration, 0, 10);
    var r = irandom_range(0, wiggle);
    var dir = irandom_range(0, 360);
    x = initialX + lengthdir_x(r, dir);
    y = initialY + lengthdir_y(r, dir);
    attackTimer++;
    attackTimer = min(attackTimer, attackDuration * 1.3);
}
// go at the player if attacking
else
{
    x += lengthdir_x(spd, point_direction(initialX, initialY, attackTargetX, attackTargetY));
    y += lengthdir_y(spd, point_direction(initialX, initialY, attackTargetX, attackTargetY));
    image_angle += rot;
    image_xscale = min(2, image_xscale * 1.02);
    image_yscale = min(2, image_yscale * 1.02);
    if (y &gt; getDisplayRoomHeight() + (0.5 * point_distance(0, 0, sprite_width, sprite_height)) - 60)
    {
        /// end and explode
        effect_create_above(ef_explosion, x, y, image_xscale, c_black);
        effect_create_above(ef_explosion, x, y, image_xscale, c_red);
        // create fragments
        var n = irandom_range(3, 6);
        for (var i = 0; i &lt; 360; i += 360 / n)
        {
            var dir = i + irandom_range(-n / 360, n / 360);
            var f = instance_create(GUIToRoomX(x), GUIToRoomY(y), obj_spellFragment);
            f.dir = dir;
            f.image_xscale = image_xscale;
            f.image_yscale = image_yscale;
            f.spd = f.spd * image_xscale;
            f.image_blend = c_red;
        }
        playerDamage(2);
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
